<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 n8n 建立 LINE 個人助理</title>
      <link href="/2025/07/27/n8n-line/"/>
      <url>/2025/07/27/n8n-line/</url>
      
        <content type="html"><![CDATA[<h2 id="動機">動機</h2><p>想要練習看看使用非常方便的 n8n 來建立屬於自己的 LINE 個人助理。</p><h2 id="解決方法">解決方法</h2><p>透過 ngrok 反向代理，將本機的 n8n 服務公開到網路上，然後在 n8n 上透過 Webhook 接收 LINE 訊息，並搭配 AI Agent 來控制 Google 行事曆。</p><h2 id="實作">實作</h2><h3 id="建立-ngrok">建立 ngrok</h3><p>到 <a href="https://ngrok.com/">https://ngrok.com/</a> 註冊一個帳戶，登入後可以看到右邊有很多啟動方式。<br>我們選擇使用 docker 來啟動。</p><img src="/2025/07/27/n8n-line/image.png" class=""><p>使用下方的指令進行啟動。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --net=host -it -e NGROK_AUTHTOKEN=&lt;你的金鑰&gt; ngrok/ngrok:latest http &lt;n8n 的埠號&gt;</span><br></pre></td></tr></table></figure><p>看到這個畫面代表啟動成功。</p><img src="/2025/07/27/n8n-line/image-1.png" class=""><h3 id="創建-Webhook">創建 Webhook</h3><p>剛開始先創建一個 Webhook 來接收訊號，這個 Webhook 會被網址使用 post 觸發。</p><img src="/2025/07/27/n8n-line/image-2.png" class=""><h3 id="連接-LINE-BOT">連接 LINE BOT</h3><p>把 Webhook 的 URL 複製到 LINE BOT 的 Webhook URL 裡。</p><img src="/2025/07/27/n8n-line/image-3.png" class=""><blockquote><p>注意紅色框框要改成 ngrok 提供的網址。</p></blockquote><p>接下來到 Response settings 把 Webhooks 打開。</p><img src="/2025/07/27/n8n-line/image-4.png" class=""><h3 id="測試連線">測試連線</h3><p>點選 <code>Listen for test event</code> 進行測試。</p><img src="/2025/07/27/n8n-line/image-5.png" class=""><p>在 <a href="https://developers.line.biz/console">https://developers.line.biz/console</a> 找到自己的機器人，並進入到 Messaging API 後，可以點選 <code>Verify</code> 進行測試。</p><img src="/2025/07/27/n8n-line/image-6.png" class=""><p>出現 Success 後，就可以在 Output 上看到回傳的結果。</p><img src="/2025/07/27/n8n-line/image-7.png" class=""><h3 id="建立一個表單">建立一個表單</h3><p>建立一個 <code>Edit Fields</code> 節點，把輸入資訊整理成一個表單。</p><img src="/2025/07/27/n8n-line/image-8.png" class=""><h3 id="建立一個-AI-Agent">建立一個 AI Agent</h3><p>建立一個 AI Agent 後，我們可以看到它需要有三個元件，分別是:「模型」、「資料庫」、「工具」。</p><img src="/2025/07/27/n8n-line/image-9.png" class=""><p>模型的部分選擇免費的 Google Gemini。</p><img src="/2025/07/27/n8n-line/image-10.png" class=""><p>資料庫的部份選擇一般即可。</p><img src="/2025/07/27/n8n-line/image-11.png" class=""><p>工具的部份可以依照自己的需求自行添加，稍後會添加。</p><h3 id="輸入模型-API">輸入模型 API</h3><p>點擊模型可以進入到此頁面，要先創建憑證，創建時會需要輸入 API key，輸入完後儲存，並選擇要使用的模型版本。</p><img src="/2025/07/27/n8n-line/image-12.png" class=""><h3 id="測試模型運作">測試模型運作</h3><p>我們在 LINE 上輸入&quot;你好&quot;後，模型成功回覆，代表模型正常運作。</p><img src="/2025/07/27/n8n-line/image-13.png" class=""><h3 id="GCP-憑證">GCP 憑證</h3><p>因為我們等等會使用到 google 日曆，因此我們需要申請一個使用者憑證才能做使用。<br>首先要到 <a href="https://console.cloud.google.com/">https://console.cloud.google.com/</a> ，進來後先創建一個專案，創建完後會看到這個頁面。</p><img src="/2025/07/27/n8n-line/image-14.png" class=""><p>我們點選 API 和服務，後搜尋 Google Calendar API 進行安裝，我們等等會需要用到。</p><img src="/2025/07/27/n8n-line/image-15.png" class=""><p>接著回到「API 和服務」頁面，點選憑證，然後創建一個 OAuth 用戶端 ID。<br>應用程式類型選擇「網頁應用程式」，名稱可以自定義。</p><img src="/2025/07/27/n8n-line/image-16.png" class=""><p>接下來按建立，建立完畢後會出現 Client ID 和 Client Secret，這兩個要保存好，等等會用到。</p><h3 id="新增一個日曆">新增一個日曆</h3><p>在 Google 日曆中新增一個日曆。</p><img src="/2025/07/27/n8n-line/image-17.png" class=""><h3 id="串接實用工具">串接實用工具</h3><p>我們使用 Google Calendar 作為範例，讓 AI 能夠幫我們新增行事曆排程。</p><img src="/2025/07/27/n8n-line/image-18.png" class=""><p>新增完節點後，我們要輸入憑證，會看到這個畫面。<br>要把 OAuth Redirect URL 複製到剛剛在 GCP 建立的憑證上 (已授權的重新導向 URI)，然後儲存。<br>再把 Client ID 和 Client Secret 輸入進 n8n，再點擊 Sign in with Google 進行驗證。</p><img src="/2025/07/27/n8n-line/image-19.png" class=""><img src="/2025/07/27/n8n-line/image-20.png" class=""><p>紅色框的部分，要改為目標日曆，開始與結束日期由 AI 自動輸入。<br>(紅框上的部分，可以依照自己的需求進行設定)</p><img src="/2025/07/27/n8n-line/image-21.png" class=""><img src="/2025/07/27/n8n-line/image-22.png" class=""><h3 id="新增當前時間">新增當前時間</h3><p>因為日曆排程需要日期與時間，因此我們要在 AI Agent 節點前新增一個 Date &amp; Time 節點，讓 AI 知道當前時間。<br>紅框內的選項記得要打開，這樣才能引用之前的輸入。</p><img src="/2025/07/27/n8n-line/image-23.png" class=""><h3 id="優化模型">優化模型</h3><p>在 Option 選項裡新增 System Message 後，可以看到預設的 prompt 是告訴 AI「你是一個有用的助理」，我們可以透過下 prompt 來優化 AI，讓 AI 能夠更清楚的知道它要做什麼。</p><img src="/2025/07/27/n8n-line/image-24.png" class=""><p>因此，我提供一個 prompt 給大家做參考。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你是一位個人助理，你的職責是協助使用者處理日常事務，你可以使用以下工具來完成任務:</span><br><span class="line">- Google Calendar: 用於建立行事曆事件，當使用者需要安排行程或建立提醒時，請使用此工具，事件的摘要(Summary)是必填欄位。</span><br><span class="line"></span><br><span class="line">目前時間為: &#123;&#123; $json.currentDate &#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要記得改為 Expression 輸入模式</p></blockquote><p>這樣就完成了 AI 助理的建置，還有很多方便的工具可以依照需求自行新增。</p><h3 id="建立機器人回覆節點">建立機器人回覆節點</h3><p>建立一個 HTTP Request 節點，打一個 API 來回覆使用者。<br>使用 POST 模式，URL 為 <code>https://api.line.me/v2/bot/message/reply</code>，Authentication 要選擇 <code>Generic Credential Type</code>，然後選擇 <code>Header Auth</code>。</p><img src="/2025/07/27/n8n-line/image-25.png" class=""><p>創建一個 <code>Header Auth</code>，名稱為 <code>Authorization</code>，值要輸入 <code>Bearer &lt;access token&gt;</code>。</p><img src="/2025/07/27/n8n-line/image-26.png" class=""><p>打開 <code>Send Body</code> 選項，使用 Json 格式，並輸入以下 Json 內容。</p><img src="/2025/07/27/n8n-line/image-27.png" class=""><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;replyToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;&#123; $(&#x27;Edit Fields&#x27;).first().json.replyToken &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;&#123; $json.output &#125;&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="測試回覆">測試回覆</h3><p>使用 LINE 和 Bot 進行對話，最後 Bot 有成功回覆訊息。</p><img src="/2025/07/27/n8n-line/image-28.png" class=""><h3 id="正式開放-Webhook">正式開放 Webhook</h3><p>啟動我們的 Workflow。</p><img src="/2025/07/27/n8n-line/image-29.png" class=""><p>最後，只需要把我們 Webhook 節點的 <code>Test URL</code> 改為 <code>Production URL</code>，這樣就能夠一直監聽。</p><img src="/2025/07/27/n8n-line/image-30.png" class=""><blockquote><p>也要記得把 LINE Bot 的 Webhook 替換成 Production URL 喔</p></blockquote><h2 id="如何使用">如何使用</h2><p>建置完畢後，我們就能夠在 LINE 上輸入需求，讓個人助理幫你完成事務。</p><img src="/2025/07/27/n8n-line/image-31.png" class=""><img src="/2025/07/27/n8n-line/image-32.png" class=""><h2 id="總結">總結</h2><p>n8n 是一個非常好用的自動化工作流平台，使用者不需要寫大量的 Code，只需要透過建立節點來打造出自己的工作流程，節省大量的開發時間，重點它是免費開源的!!!</p><h2 id="參考文獻">參考文獻</h2><ul><li><a href="https://ngrok.com/">https://ngrok.com/</a></li><li><a href="https://n8n.io/">https://n8n.io/</a></li><li><a href="https://developers.line.biz/">https://developers.line.biz/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>filebrowser + nginx 建立自定義網域下載</title>
      <link href="/2025/07/09/fbs-share/"/>
      <url>/2025/07/09/fbs-share/</url>
      
        <content type="html"><![CDATA[<h2 id="動機">動機</h2><p>因為系上的實驗室內部有架設 filebrowser 提供檔案傳輸的服務，但最近遇到一個問題，在下載檔案時 filebrowser 會透過 JSON Web Token (JWT) 來驗證使用者，憑證輸入後會導致網址變得非常難看。因為常常會使用 wget 來下載檔案，不想要輸入又臭又長的網址，因此想出了一個方法解決了網址超長且意義不明確的問題。</p><ul><li><strong>因為輸入 token 導致網址超長</strong><img src="/2025/07/09/fbs-share/image.png" class="" title="long token"></li></ul><h2 id="方法">方法</h2><p>透過 filebrowser 的邀請碼的方式來讓使用者下載檔案時不需要輸入 token，這樣也就意味著網址不會又臭又長的，而且可以搭配 Nginx 反向代理來進行訪問限制與轉發，使用自定義網域來指向邀請碼所提供的分享連結進行檔案下載。</p><h2 id="實作">實作</h2><h3 id="第一步">第一步</h3><p>打開 filebrowser ，創建一個主資料夾，用來存放 filebrowser 裡的檔案，然後為它創建一個邀請碼，時間可以設訂 999 小時(含以上)，確保連結不會在短期失效。</p><ul><li><strong>邀請碼創建完畢</strong><img src="/2025/07/09/fbs-share/image-1.png" class="" title="share code"></li></ul><h3 id="第二步">第二步</h3><p>創建完邀請碼後，透過邀請碼旁邊的複製按鈕，來取得分享連結。</p><h3 id="第三步">第三步</h3><p>透過 Nginx 來設定網路規則讓連線指向我們的分享連結，並禁止訪問特定的網址。<br>設定完之後就能夠透過指定網域來進行下載檔案啦!</p><p>nginx 設定範例:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~ ^/dl/.+</span> &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/dl/(.*)$</span> /api/public/dl/juG-7DV_/<span class="variable">$1</span> <span class="literal">break</span>; <span class="comment"># dl/ 後面要改成自己的邀請碼</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://172.16.3.49:4100;  <span class="comment"># 指向你的 Filebrowser 服務</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阻擋其他路徑訪問</span></span><br><span class="line"><span class="section">location</span> <span class="regexp">~ ^/api/public/dl/[^/]+/?$</span> &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> = /dl &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">autoindex</span> <span class="literal">off</span>;</span><br></pre></td></tr></table></figure><h2 id="如何使用">如何使用</h2><p>依照你在 nginx 設定的網域並加上 <code>dl/&lt;目錄名稱or檔案名稱&gt;</code> 來下載你的檔案。</p><blockquote><p>範例: <code>https://abc.com/dl/&lt;目錄名稱or檔案名稱&gt;</code></p></blockquote><h2 id="如何發現">如何發現</h2><p>使用 filebrowser 一段時間了，只知道可以透過邀請碼來下載檔案，事發後突然想到邀請碼不需要輸入 token 就能夠下載檔案，而且連結可以保留很長一段時間，因此我開始嘗試使用邀請碼來固定下載連結，後來又發現使用的連結有特定的格式關係，這讓我想到可以搭配 Nginx 來將我的網域導到這個特定的連結，因此就發現了這個方法解決了網址超長的問題之外，又能夠讓下載連結變得有意義、淺顯易懂。</p><blockquote><ul><li>主資料夾分享的下載連結<img src="/2025/07/09/fbs-share/image-2.png" class="" title="share1"></li><li>主資料夾底下檔案的下載連結<img src="/2025/07/09/fbs-share/image-3.png" class="" title="share2">可以發現以 dl 後為主資料夾的邀請碼，之後裡面的每個資料夾或檔案都是以自己命名的名稱做區分，因此可以很好理解每個檔案的意義，透過 nginx 後，在輸入網址下載時可以只輸入邀請碼後面的部份，而不需要輸入前面重複的網址區塊。</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建屬於自己的檔案管理頁面</title>
      <link href="/2025/06/28/filebrowser-service/"/>
      <url>/2025/06/28/filebrowser-service/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>今天要介紹一個好用的檔案管理工具 FileBrowser，讓我們能夠很方便的管理與修改檔案。</p><h2 id="什麼是-FileBrowser">什麼是 FileBrowser</h2><p>FileBrowser 可以連結到遠端的伺服器，讓一般使用者能夠透過瀏覽器的方式來對檔案進行管理 (edit, update, create, delete)，不需要使用終端機。</p><h2 id="如何建置">如何建置</h2><h4 id="Dockerfile">Dockerfile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.21</span>.<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk update &amp;&amp; apk add --no-cache \</span></span><br><span class="line"><span class="language-bash">    curl wget ca-certificates bash tar grep sed coreutils unzip &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    adduser -h /opt/app -D app &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    curl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./entrypoint /opt/app/entrypoint</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> a+x /opt/app/entrypoint</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> app</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /srv</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /database/filebrowser.db</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /config/settings.json</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">4100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/opt/app/entrypoint&quot;</span> ]</span></span><br></pre></td></tr></table></figure><h4 id="entrypoint">entrypoint</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">filebrowser config init --port 4100 --address <span class="string">&quot;&quot;</span> --baseurl <span class="string">&quot;&quot;</span> --<span class="built_in">log</span> <span class="string">&quot;stdout&quot;</span> --root=<span class="string">&quot;/srv&quot;</span></span><br><span class="line">filebrowser <span class="built_in">users</span> add &lt;name&gt; &lt;password&gt; --perm.admin <span class="comment"># 設定管理員帳戶</span></span><br><span class="line">filebrowser <span class="comment"># 啟動服務</span></span><br></pre></td></tr></table></figure><blockquote><p>密碼長度需大於 12 字元</p></blockquote><h4 id="建置-image">建置 image</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t fbs:alpine3.21.3 .</span><br></pre></td></tr></table></figure><h4 id="啟動服務">啟動服務</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> srv database config</span><br><span class="line">docker run --name fbs -dp 4100:4100 -v srv:/srv -v database:/database -v config:/config fbs:alpine3.21.3</span><br></pre></td></tr></table></figure><h2 id="如何使用">如何使用</h2><p>開啟瀏覽器並輸入 <code>&lt;ip&gt;:&lt;port&gt;</code>，進入 filebrowser 就能夠對公開的檔案做管理。</p><img src="/2025/06/28/filebrowser-service/filebrowser.png" class="" title="filebrowser"><p><a href="https://filebrowser.org/index.html">圖片來源</a></p><h2 id="參考文獻">參考文獻</h2><ul><li><a href="https://filebrowser.org/">https://filebrowser.org/</a></li><li><a href="https://blog.csdn.net/weixin_48227918/article/details/131798149">https://blog.csdn.net/weixin_48227918/article/details/131798149</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 WSL + DevContainer 進行程式開發(二)</title>
      <link href="/2025/06/15/wsl-devcontainer-2/"/>
      <url>/2025/06/15/wsl-devcontainer-2/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-Dev-Container">什麼是 Dev Container</h2><p>是以 Docker 為基礎，將開發環境與依賴套件或工具打包成一個容器 (Container)，方便使用者能夠快速建置與復原開發環境。<br>主要的功能如下:</p><ul><li><strong>環境一致性</strong>: 無論是在 Windows 或 Linux，只要設定好 Dev Container，同一份程式碼都可以在一致的環境下運作</li><li><strong>隔離性</strong>: 可同時在一台電腦上運行多個不同語言、版本的開發環境，避免汙染本機</li></ul><p><img src="https://code.visualstudio.com/assets/docs/devcontainers/containers/architecture-containers.png" alt="Dev Container 架構"><a href="https://code.visualstudio.com/docs/devcontainers/containers">圖片來源</a></p><h2 id="如何建置">如何建置</h2><h3 id="事前準備">事前準備</h3><ol><li>安裝 Docker | <a href="https://www.docker.com/">Docker: Accelerated Container Application Development</a></li><li>使用 VSCode + WSL</li><li>安裝 Dev Container 擴充套件 | <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers">Dev Containers - Visual Studio Marketplace</a></li></ol><h3 id="新增開發用資料夾">新增開發用資料夾</h3><p>在 WSL 環境裡新增一個資料夾並進入 VSCode</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> DevContainerTest &amp;&amp; <span class="built_in">cd</span> DevContainerTest</span><br><span class="line">code .</span><br></pre></td></tr></table></figure><h3 id="新增-Dev-Container-設定檔">新增 Dev Container 設定檔</h3><p>點擊 VSCode 左下角的操作選單或使用 <code>Ctrl + Shift + P</code>，選擇 Add Dev Container Configuration Files。</p><img src="/2025/06/15/wsl-devcontainer-2/image.png" class=""><img src="/2025/06/15/wsl-devcontainer-2/image-1.png" class=""><p>接下來選擇映像檔，為了示範我選擇 Ubuntu jammy 版本。</p><img src="/2025/06/15/wsl-devcontainer-2/image-2.png" class=""><img src="/2025/06/15/wsl-devcontainer-2/image-3.png" class=""><p>然後安裝所需的套件，這裡選擇 Node.js 套件。</p><img src="/2025/06/15/wsl-devcontainer-2/image-4.png" class=""><p>接下來都按 OK 就好。</p><img src="/2025/06/15/wsl-devcontainer-2/image-5.png" class=""><img src="/2025/06/15/wsl-devcontainer-2/image-6.png" class=""><p>就會建立一個 devcontainer.json 的設定檔。</p><img src="/2025/06/15/wsl-devcontainer-2/image-7.png" class=""><h3 id="查看-devcontainer-json">查看 devcontainer.json</h3><p>設定檔由以下元素組成:</p><ul><li><code>name</code>: container name</li><li><code>image</code>: 使用 dev container 官方的映像檔<blockquote><p>如果要使用 dockerfile 或 compose 可以參考<br><a href="https://containers.dev/guide/dockerfile">Using Images, Dockerfiles, and Docker Compose</a></p></blockquote></li><li><code>features</code>: 安裝官方提供的套件</li><li><code>forwardPorts</code>: 將 Container 的 port 對應到本地的 port</li><li><code>postCreateCommand</code>: Container 建置完後會執行的命令</li><li><code>customizations</code>: 客製化設定，例如 VSCode 的擴充套件或設定參數等<blockquote><p>詳細內容，可以參考 <a href="https://containers.dev/supporting">支援工具和服務 — Supporting tools and services</a></p></blockquote></li><li><code>remoteUser</code>: Container 執行的身份</li><li><code>containerEnv</code>: Container 的環境變數</li></ul><h3 id="更新-devcontainer-json">更新 devcontainer.json</h3><p>依照自己的需求來進一步的設定屬於自己開發環境，我這邊以 Vue 為例，新增常用的擴充套件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// For format details, see https://aka.ms/devcontainer.json. For config options, see the</span></span><br><span class="line"><span class="comment">// README at: https://github.com/devcontainers/templates/tree/main/src/ubuntu</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ubuntu&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile</span></span><br><span class="line">  <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mcr.microsoft.com/devcontainers/base:jammy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;features&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ghcr.io/devcontainers/features/node:1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Configure tool-specific properties.</span></span><br><span class="line">  <span class="attr">&quot;customizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">// Set *default* container specific settings.json values on container create.</span></span><br><span class="line">      <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;octref.vetur&quot;</span><span class="punctuation">,</span> <span class="string">&quot;vue.volar&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ms-vscode.live-server&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.</span></span><br><span class="line">  <span class="attr">&quot;remoteUser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="執行-Dev-Container">執行 Dev Container</h3><p>設定完畢後，就可以使用 <code>Ctrl + Shift + P</code>，並選擇 <code>Reopen in Container</code> 來進入 Container</p><img src="/2025/06/15/wsl-devcontainer-2/image-8.png" class=""><p>Container 建置完畢後，就可以進行環境測試。</p><ul><li>檢查是否有 node 套件，以及擴充套件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><img src="/2025/06/15/wsl-devcontainer-2/image-9.png" class=""><img src="/2025/06/15/wsl-devcontainer-2/image-10.png" class=""><h3 id="開始使用開發環境進行開發">開始使用開發環境進行開發</h3><p>範例: 透過開發環境來建置一個 Vue 網頁</p><h4 id="安裝-Vue-套件">安裝 Vue 套件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue.js</span><br></pre></td></tr></table></figure><h4 id="創建-Vue-專案">創建 Vue 專案</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><img src="/2025/06/15/wsl-devcontainer-2/image-11.png" class=""><h4 id="執行專案">執行專案</h4><p>這樣我們就能夠透過 Dev Container 進行開發專案了~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;project name&gt;</span><br><span class="line">yarn</span><br><span class="line">yarn dev --host 0.0.0.0</span><br></pre></td></tr></table></figure><p>透過擴充套件 <code>Live Preview</code> 就能夠在側邊群組即時顯示預覽頁面。</p><img src="/2025/06/15/wsl-devcontainer-2/image-12.png" class=""><blockquote><p>Dev Container 的所有檔案會存在該專案的目錄裡。</p><img src="/2025/06/15/wsl-devcontainer-2/image-13.png" class=""></blockquote><h2 id="關閉-Container">關閉 Container</h2><p>使用 <code>Ctrl + Shift + P</code>，選擇 <code>Close Remote Connection</code>就能夠退出 Container。</p><img src="/2025/06/15/wsl-devcontainer-2/image-14.png" class=""><h2 id="結論">結論</h2><p>Dev Container 不管是個人使用或在多人開發上，都大幅度的減少使用者建立開發環境所需要的時間成本，能快速重構當時的開發環境，並且也以利於後續專案維護。</p><h2 id="參考文獻">參考文獻</h2><ul><li><a href="https://code.visualstudio.com/docs/devcontainers/containers">https://code.visualstudio.com/docs/devcontainers/containers</a></li></ul><div class="flink"><div class="flink-name">文章連結</div><div class="flink-list">      <div class="flink-list-item">        <a href="https://blog.raylon.dev/2025/06/13/wsl-devcontainer-1/" title="上一篇" target="_blank">          <div class="flink-item-icon">            <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="上一篇" />          </div>          <div class="flink-item-name">上一篇</div>          <div class="flink-item-desc" title="使用 WSL + DevContainer 進行程式開發(一)">使用 WSL + DevContainer 進行程式開發(一)</div>        </a>      </div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 WSL + DevContainer 進行程式開發(一)</title>
      <link href="/2025/06/13/wsl-devcontainer-1/"/>
      <url>/2025/06/13/wsl-devcontainer-1/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-WSL">什麼是 WSL</h2><p>WSL 全名為 Windows Subsystem for Linux，是一款能讓使用者在 Windows 作業系統上直接執行 Linux 環境的 Windows 子系統。</p><h2 id="WSL-的版本介紹">WSL 的版本介紹</h2><h3 id="WSL-1">WSL 1</h3><p>是採用系統呼叫轉譯 (System Call Translation) 的架構，將 Linux 的命令轉譯成 Windows API，這種方式是在 Windows 上模擬 Linux 的環境。因為每次的動作都要進行轉譯，因此會有執行延遲的問題。</p><p><img src="https://benjr.tw/wp-content/uploads/2019/09/WSL1.png" alt="WSL Architecture"><br><a href="https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fbenjr.tw%2F102024&amp;psig=AOvVaw1WuM2ujUUpXrAVdzAJh0oA&amp;ust=1750143469697000&amp;source=images&amp;cd=vfe&amp;opi=89978449&amp;ved=0CBQQjRxqFwoTCMCDiNCu9Y0DFQAAAAAdAAAAABAK">圖片來源</a></p><h3 id="WSL-2">WSL 2</h3><p>則是採用虛擬機 (Virtual Machine) 的架構，在虛擬機內運行一個完整的 Linux 作業系統，無需透過轉譯的方式，因此執行速度大幅提升。<br><img src="https://www.polarsparc.com/xhtml/images/WSL-01.png" alt="WSL2 Architecture"><br><a href="https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fwww.polarsparc.com%2Fxhtml%2FIntroToWSL2.html&amp;psig=AOvVaw0VMbhWC8N0blRyxrFUzIPp&amp;ust=1750142709134000&amp;source=images&amp;cd=vfe&amp;opi=89978449&amp;ved=0CBQQjRxqFwoTCICz5uWr9Y0DFQAAAAAdAAAAABAn">圖片來源</a></p><blockquote><p>完整的 WSL 2 架構圖<br><img src="https://i.redd.it/po98dksksjx21.png" alt="Complete WSL2 Architecture"><a href="https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fbashonubuntuonwindows%2Fcomments%2Fbna3hq%2Fthe_complete_diagram_of_the_wsl2_architecture_as%2F%3Ftl%3Dzh-hant&amp;psig=AOvVaw0VMbhWC8N0blRyxrFUzIPp&amp;ust=1750142709134000&amp;source=images&amp;cd=vfe&amp;opi=89978449&amp;ved=0CBQQjRxqFwoTCICz5uWr9Y0DFQAAAAAdAAAAABAx">圖片來源</a></p></blockquote><h2 id="安裝-WSL">安裝 WSL</h2><ol><li><p>在 windows 功能中打開 <code>Virtual Machine Platform</code> 與 <code>Windows Subsystem for Linux</code></p><img src="/2025/06/13/wsl-devcontainer-1/windows-features.png" class="" title="windows features"></li><li><p>以系統管理員身分開啟 powershell 執行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure></li><li><p>重啟系統</p></li><li><p>建置第一個 Ubuntu 子系統</p><ul><li>使用 Ubuntu 22.04 版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install -d Ubuntu-22.04</span><br></pre></td></tr></table></figure></li></ol><h2 id="WSL-常用的命令">WSL 常用的命令</h2><p>列出幾個比較常用的命令</p><h3 id="列出所有可用的-Linux">列出所有可用的 Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --list --online</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">The</span> following is a list of valid distributions that can be installed.</span><br><span class="line"><span class="attribute">Install</span> using &#x27;wsl.exe --install &lt;Distro&gt;&#x27;.</span><br><span class="line"></span><br><span class="line"><span class="attribute">NAME</span>                            FRIENDLY NAME</span><br><span class="line"><span class="attribute">Ubuntu</span>                          Ubuntu</span><br><span class="line"><span class="attribute">Debian</span>                          Debian GNU/Linux</span><br><span class="line"><span class="attribute">kali</span>-linux                      Kali Linux Rolling</span><br><span class="line"><span class="attribute">Ubuntu</span>-<span class="number">18</span>.<span class="number">04</span>                    Ubuntu <span class="number">18</span>.<span class="number">04</span> LTS</span><br><span class="line"><span class="attribute">Ubuntu</span>-<span class="number">20</span>.<span class="number">04</span>                    Ubuntu <span class="number">20</span>.<span class="number">04</span> LTS</span><br><span class="line"><span class="attribute">Ubuntu</span>-<span class="number">22</span>.<span class="number">04</span>                    Ubuntu <span class="number">22</span>.<span class="number">04</span> LTS</span><br><span class="line"><span class="attribute">Ubuntu</span>-<span class="number">24</span>.<span class="number">04</span>                    Ubuntu <span class="number">24</span>.<span class="number">04</span> LTS</span><br><span class="line"><span class="attribute">OracleLinux_7_9</span>                 Oracle Linux <span class="number">7</span>.<span class="number">9</span></span><br><span class="line"><span class="attribute">OracleLinux_8_7</span>                 Oracle Linux <span class="number">8</span>.<span class="number">7</span></span><br><span class="line"><span class="attribute">OracleLinux_9_1</span>                 Oracle Linux <span class="number">9</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">openSUSE</span>-Leap-<span class="number">15</span>.<span class="number">6</span>              openSUSE Leap <span class="number">15</span>.<span class="number">6</span></span><br><span class="line"><span class="attribute">SUSE</span>-Linux-Enterprise-<span class="number">15</span>-SP5    SUSE Linux Enterprise <span class="number">15</span> SP5</span><br><span class="line"><span class="attribute">SUSE</span>-Linux-Enterprise-<span class="number">15</span>-SP6    SUSE Linux Enterprise <span class="number">15</span> SP6</span><br><span class="line"><span class="attribute">openSUSE</span>-Tumbleweed             openSUSE Tumbleweed</span><br></pre></td></tr></table></figure><h3 id="建置-Linux-子系統">建置 Linux 子系統</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install -d &lt;Distro&gt;</span><br></pre></td></tr></table></figure><h3 id="列出以安裝的-Linux-子系統">列出以安裝的 Linux 子系統</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --list</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Windows</span> Subsystem for Linux Distributions:</span><br><span class="line"><span class="attribute">Ubuntu</span>-<span class="number">22</span>.<span class="number">04</span> (Default)</span><br></pre></td></tr></table></figure><blockquote><p>有 (Default) 代表為預設啟動</p></blockquote><h3 id="設定預設啟動的-Linux-子系統">設定預設啟動的 Linux 子系統</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default &lt;Distro&gt;</span><br></pre></td></tr></table></figure><h3 id="進入-Linux-子系統">進入 Linux 子系統</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>exit</code> 可以退出子系統</p></blockquote><h3 id="移除特定的-Linux-子系統">移除特定的 Linux 子系統</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister &lt;Distro&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意! 會刪除子系統內的所有檔案</p></blockquote><h3 id="更新-WSL">更新 WSL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --update</span><br></pre></td></tr></table></figure><h3 id="查詢更多-WSL-相關命令">查詢更多 WSL 相關命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h2 id="如何使用-WSL-進行開發">如何使用 WSL 進行開發</h2><p>前置任務都準備完畢，終於要進入正軌了，開始進入 WSL 建置開發環境~</p><p>創建完 Linux 子系統後就可以進入到子系統內。</p><blockquote><p>以 Ubuntu 22.04 作為執行範例</p></blockquote><h2 id="本機上安裝-VSCode">本機上安裝 VSCode</h2><p><a href="https://code.visualstudio.com/">安裝 VSCode</a></p><h2 id="安裝-VSCode-套件">安裝 VSCode 套件</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">安裝 WSL 套件</a></p><h3 id="進入-Linux-子系統-2">進入 Linux 子系統</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl</span><br></pre></td></tr></table></figure><h3 id="創建工作目錄">創建工作目錄</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/mywork</span><br><span class="line"><span class="built_in">cd</span> ~/mywork</span><br></pre></td></tr></table></figure><blockquote><p>預設在進入子系統時會以 Windows 的工作目錄作為啟動目錄</p></blockquote><h3 id="進入子系統的-VSCode">進入子系統的 VSCode</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><blockquote><p>透過我們在 VSCode 上安裝的 WSL 套件，讓我們可以使用 <code>code .</code> 來開啟當前目錄的 VSCode 編輯器</p></blockquote><p>下一步就是來建置我們的 DevContainer 了</p><h2 id="參考文獻">參考文獻</h2><ul><li><a href="https://learn.microsoft.com/zh-tw/windows/wsl/install">https://learn.microsoft.com/zh-tw/windows/wsl/install</a></li><li><a href="https://learn.microsoft.com/zh-tw/windows/wsl/compare-versions">https://learn.microsoft.com/zh-tw/windows/wsl/compare-versions</a></li><li><a href="https://zh.wikipedia.org/zh-tw/%E9%80%82%E7%94%A8%E4%BA%8ELinux%E7%9A%84Windows%E5%AD%90%E7%B3%BB%E7%BB%9F">https://zh.wikipedia.org/zh-tw/适用于Linux的Windows子系统</a></li></ul><div class="flink"><div class="flink-name">文章連結</div><div class="flink-list">      <div class="flink-list-item">        <a href="https://blog.raylon.dev/2025/06/15/wsl-devcontainer-2/" title="下一篇" target="_blank">          <div class="flink-item-icon">            <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="下一篇" />          </div>          <div class="flink-item-name">下一篇</div>          <div class="flink-item-desc" title="使用 WSL + DevContainer 進行程式開發(二)">使用 WSL + DevContainer 進行程式開發(二)</div>        </a>      </div></div></div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
