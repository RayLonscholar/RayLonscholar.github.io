<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java 基礎(三)</title>
      <link href="/2025/10/04/java-3/"/>
      <url>/2025/10/04/java-3/</url>
      
        <content type="html"><![CDATA[<h2 id="介紹">介紹</h2><p>這一篇是 Java 基本語法介紹的第二篇，我們要來繼續探討程式碼架構。</p><h2 id="有效範圍">有效範圍</h2><p>Java 使用 <code>&#123; &#125;</code> 來表示程式中某個範圍區塊，變數或物件的有效範圍 (scope) 會被限制在當時被宣告的區塊內，超出了該區塊則會被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">// 無法再宣告，因為 x 已在外層區塊宣告過</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">    System.out.println(y); <span class="comment">// 無法使用，因為 y 的範圍僅限於區塊內</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="製作套件-Package">製作套件 Package</h2><p>把特定功能的程式碼包裝成一個套件 (package)，之後需要時可以直接拿來使用。</p><h3 id="自訂套件">自訂套件</h3><p>檔案位置:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src<span class="symbol">/</span></span><br><span class="line"> └─ main<span class="symbol">/</span></span><br><span class="line">     └─ java<span class="operator">/</span>com<span class="operator">/</span>raylon<span class="operator">/</span>util<span class="symbol">/</span></span><br><span class="line">         └─ HelloUtil.java</span><br></pre></td></tr></table></figure><p>內容:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.raylon.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloUtil</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匯入套件">匯入套件</h3><p>檔案位置:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">src</span>/</span><br><span class="line"> └─ <span class="selector-tag">main</span>/</span><br><span class="line">     └─ java/com/raylon/</span><br><span class="line">         └─ <span class="selector-tag">main</span><span class="selector-class">.java</span></span><br></pre></td></tr></table></figure><p>內容:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.raylon.util.HelloUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HelloUtil.sayHello(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流程控制">流程控制</h2><h3 id="if-判斷">if 判斷</h3><h4 id="if-…-else-…">if … else …</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isRaining</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isRaining) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;Bring an umbrella!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;No rain today, no need for an umbrella!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if-…-else-if-…-else-…">if … else if … else …</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">weather</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">// 1 = raining, 2 = sunny, 3 = cloudy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (weather == <span class="number">1</span>) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;Bring an umbrella.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (weather == <span class="number">2</span>) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;Wear sunglasses.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;Just go outside normally.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if-的簡寫">if 的簡寫</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (time &lt; <span class="number">18</span>) ? <span class="string">&quot;Good day.&quot;</span> : <span class="string">&quot;Good evening.&quot;</span>;</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><p>上述程式碼等同於</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span> (time &lt; <span class="number">18</span>) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;Good day.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;Good evening.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-條件判斷">switch 條件判斷</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    System.out.println(<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    System.out.println(<span class="string">&quot;Tuesday&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    System.out.println(<span class="string">&quot;Wednesday&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    System.out.println(<span class="string">&quot;Thursday&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break">break</h3><p>用來中斷迴圈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue">continue</h3><p>跳過迴圈的這一步，執行下一步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Loop-迴圈">Loop 迴圈</h2><h3 id="For">For</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot; &quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="While">While</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>, i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;1~100的偶數和(2+4+...+100)=&quot;</span> + sum);</span><br></pre></td></tr></table></figure><h3 id="Do-…-while">Do … while</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;這是第&quot;</span> + i + <span class="string">&quot;次執行迴圈&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (i++ &lt; <span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;執行完畢，i 的值=&quot;</span> + i);</span><br></pre></td></tr></table></figure><h2 id="外覆類別-wrapper-class">外覆類別 wrapper class</h2><p>原生資料類型宣告的變數，只能存放一個內容值，並沒有具備屬性與方法。為了有效處理各個原生資料類型，Java 針對原生資料類型定義了對應的類別，讓它們有了方法可以使用。</p><table><tr>  <th>型態</th>  <th>原生資料類型</th>  <th>外覆類別</th></tr><tr>  <td rowspan="4">整數</td>  <td>byte</td>  <td>Byte</td></tr><tr>  <td>short</td>  <td>Short</td></tr><tr>  <td>int</td>  <td>Integer</td></tr><tr>  <td>long</td>  <td>Long</td></tr><tr>  <td rowspan="2">浮點數</td>  <td>float</td>  <td>Float</td></tr><tr>  <td>double</td>  <td>Double</td></tr><tr>  <td>字元</td>  <td>char</td>  <td>Character</td></tr><tr>  <td>布林值</td>  <td>boolean</td>  <td>Boolean</td></tr></table><p>宣告外覆類別。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">myInt</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">Double</span> <span class="variable">myDouble</span> <span class="operator">=</span> <span class="number">5.99</span>;</span><br></pre></td></tr></table></figure><p>宣告完，就可以使用外覆類別提供的方法，下表以 Integer 為例。</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><code>外覆類別.intValue()</code></td><td>將外覆資料類型轉為原生資料型態</td></tr><tr><td><code>外覆類別.toString()</code></td><td>將外覆資料類型轉為字串</td></tr><tr><td><code>外覆類別.valueOf(原生資料型態)</code></td><td>將原生資料型態轉為外覆資料型態</td></tr></tbody></table><h2 id="字串類別-StringBuffer">字串類別 StringBuffer</h2><p>StringBuffer 可以用來修改字串，對字串進行修改、新增、刪除等，對於需要多次修改字串內容時很有幫助。</p><p>如何建立字串類別。</p><table><thead><tr><th>建構子</th><th>說明</th></tr></thead><tbody><tr><td><code>StringBuffer()</code></td><td>預設可以儲存 16 字元的長度，當儲存資料超過 16 字元時會自動擴充。</td></tr><tr><td><code>StringBuffer(int length)</code></td><td>指定儲存字元的長度。</td></tr><tr><td><code>StringBuffer(String str)</code></td><td>將字串內容儲存為 StringBuffer 物件。</td></tr></tbody></table><p>常用的方法統整:</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><code>append(object)</code></td><td>新增字串或其他型態資料。 (object 可以是原生資料類型或 string 型態)</td></tr><tr><td><code>capacity()</code></td><td>取得 stringbuffer 儲存空間大小。</td></tr><tr><td><code>charAt(int index)</code></td><td>取得字串內指定 index 的字元。</td></tr><tr><td><code>delete(int start, int end)</code></td><td>刪除字串內開始位址到結束位址的內容。</td></tr><tr><td><code>deleteAt(int index)</code></td><td>刪除字串內指定 index 的字元。</td></tr><tr><td><code>insert(int index, object)</code></td><td>將物件內容加入字串的指定位址。</td></tr><tr><td><code>reverse()</code></td><td>字串反轉。</td></tr><tr><td><code>setCharAt(int index, char)</code></td><td>將字串內的指定 index 的字元替換為指定字元。</td></tr><tr><td><code>substring(int start)</code></td><td>取得 stringbuffer 物件內容的 start 位址到底的內容。</td></tr><tr><td><code>substring(int start, int end)</code></td><td>取得 stringbuffer 物件內容的 start 到 end 位址的內容。</td></tr><tr><td><code>toString()</code></td><td>將 stringbuffer 物件轉換成一般的字串物件。</td></tr></tbody></table><p>範例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">myStringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">myStringBuffer.append(<span class="string">&quot; World!&quot;</span>);</span><br><span class="line">myStringBuffer.insert(<span class="number">5</span>, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">System.out.println(myStringBuffer);</span><br></pre></td></tr></table></figure><h2 id="陣列-Array">陣列 Array</h2><p>可以用來儲存多個相同資料類型的資料。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] num = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]; <span class="comment">// [0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="type">int</span>[] num2 = &#123;<span class="number">73</span>, <span class="number">82</span>, <span class="number">66</span>, <span class="number">54</span>, <span class="number">23</span>, <span class="number">11</span>&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在 Java 中的索引值都是從 0 開始。</p></blockquote><p>有以下三種方式列出陣列內容: 使用索引值、使用迴圈輸出、使用內建方法。</p><h3 id="使用索引">使用索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123; <span class="number">73</span>, <span class="number">82</span>, <span class="number">66</span>, <span class="number">54</span>, <span class="number">23</span>, <span class="number">11</span> &#125;;</span><br><span class="line">System.out.println(num2[<span class="number">0</span>]); <span class="comment">// 73</span></span><br></pre></td></tr></table></figure><h3 id="迴圈輸出">迴圈輸出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123; <span class="number">73</span>, <span class="number">82</span>, <span class="number">66</span>, <span class="number">54</span>, <span class="number">23</span>, <span class="number">11</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num.length; i++) &#123;</span><br><span class="line">System.out.println(num[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="內建方法">內建方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] num = &#123; <span class="number">73</span>, <span class="number">82</span>, <span class="number">66</span>, <span class="number">54</span>, <span class="number">23</span>, <span class="number">11</span> &#125;;</span><br><span class="line">System.out.println(Arrays.toString(num)); <span class="comment">// [73, 82, 66, 54, 23, 11]</span></span><br></pre></td></tr></table></figure><h3 id="索引值超出範圍的錯誤">索引值超出範圍的錯誤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123; <span class="number">73</span>, <span class="number">82</span>, <span class="number">66</span>, <span class="number">54</span>, <span class="number">23</span>, <span class="number">11</span> &#125;;</span><br><span class="line">System.out.println(num[<span class="number">6</span>]);</span><br></pre></td></tr></table></figure><p>會出現:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Exception</span> <span class="keyword">in</span> thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: <span class="keyword">Index</span> <span class="number">6</span> <span class="keyword">out</span> <span class="keyword">of</span> bounds <span class="keyword">for</span> length <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="多維陣列">多維陣列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] score = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">2</span>][<span class="number">3</span>]; <span class="comment">// [[0, 0, 0], [0, 0, 0]]</span></span><br><span class="line">System.out.println(Arrays.deepToString(score));</span><br></pre></td></tr></table></figure><blockquote><p><code>deepToString()</code>: 使用遞迴的方式將內容轉換為 String。</p></blockquote><h3 id="陣列內建方法介紹">陣列內建方法介紹</h3><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><code>Arrays.equals(array1, array2)</code></td><td>比較兩個陣列的內容是否相同。</td></tr><tr><td><code>Arrays.fill(array, value)</code></td><td>將所有元素設定指定值。</td></tr><tr><td><code>Arrays.fill(array, start index, amount, value)</code></td><td>將索引範圍內的元素填入指定值。</td></tr><tr><td><code>Arrays.binarySearch(array, value)</code></td><td>在陣列中搜尋指定值。</td></tr><tr><td><code>Arrays.sort(array)</code></td><td>排序陣列內容。</td></tr><tr><td><code>Arrays.toString(array)</code></td><td>將陣列轉換為字串。</td></tr></tbody></table><h2 id="程式進入點接收的陣列參數">程式進入點接收的陣列參數</h2><p>學到了陣列，我們就可以回來看程式的進入點。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; &#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>String[]</code>: 屬於 main 方法接收參數的類型。<br><code>args</code>: 是參數名稱。</p></blockquote><p>我們在執行程式時可以附帶參數，如下:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;java 檔案名稱&gt;</span> <span class="section">&lt;附加參數&gt;</span></span><br></pre></td></tr></table></figure><p>我們輸入的附加參數會以空格為間隔，儲存在 args 變數裡。<br>我們可以從以下程式碼驗證。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(args.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>傳入的參數是以字串形式呈現，如果要進行計算則必須要轉換為數值資料格式。</p></blockquote><h2 id="動態陣列-ArrayList">動態陣列 ArrayList</h2><p>ArrayList 與原生的 Array 差異在於，原生的陣列無法直接修改陣列大小，ArrayList 則可以隨時修改。<br>ArrayList 只能用來存放物件形式的資料類型，不支援原生資料類型 (例如: int, float, double 等)。</p><p>如何建立 ArrayList。</p><table><thead><tr><th>建構子</th><th>說明</th></tr></thead><tbody><tr><td><code>ArrayList()</code></td><td>建立一個空的 ArrayList 物件。</td></tr><tr><td><code>ArrayList(集合物件)</code></td><td>將集合物件指定給 ArrayList 物件。</td></tr><tr><td><code>ArrayList(length)</code></td><td>建立指定長度的 ArrayList 物件。</td></tr></tbody></table><p>常用的方法統整:</p><table><thead><tr><th>方法</th><th>功能</th><th>回傳值類型</th></tr></thead><tbody><tr><td><code>add(元素)</code></td><td>將指定的元素加入 ArrayList 陣列的最後。</td><td>boolean</td></tr><tr><td><code>add(index, 元素)</code></td><td>插入元素至 ArrayList 陣列中索引指定的位置。</td><td>void</td></tr><tr><td><code>clear()</code></td><td>清除所有元素。</td><td>void</td></tr><tr><td><code>contains(元素)</code></td><td>判斷 ArrayList 陣列中是否有包含此元素。</td><td>boolean</td></tr><tr><td><code>get(index)</code></td><td>取得指定索引的元素。</td><td>object</td></tr><tr><td><code>remove(index / object)</code></td><td>移除指定索引的元素。</td><td>object</td></tr><tr><td><code>set(index, 元素)</code></td><td>將指定元素的內容取代。</td><td>object</td></tr><tr><td><code>size()</code></td><td>回傳 ArrayList 陣列中元素的數量。</td><td>int</td></tr></tbody></table><p>範例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; fruits = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增元素</span></span><br><span class="line">fruits.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">fruits.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">fruits.add(<span class="string">&quot;Cherry&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素</span></span><br><span class="line">fruits.add(<span class="number">1</span>, <span class="string">&quot;Mango&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得元素</span></span><br><span class="line">System.out.println(<span class="string">&quot;第一個水果是: &quot;</span> + fruits.get(<span class="number">0</span>)); <span class="comment">// 第一個水果是: Apple</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改元素</span></span><br><span class="line">fruits.set(<span class="number">2</span>, <span class="string">&quot;Grapes&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除元素</span></span><br><span class="line">fruits.remove(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顯示所有元素</span></span><br><span class="line">System.out.println(<span class="string">&quot;目前的清單: &quot;</span> + fruits); <span class="comment">// 目前的清單: [Apple, Grapes, Cherry]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 顯示大小</span></span><br><span class="line">System.out.println(<span class="string">&quot;共有 &quot;</span> + fruits.size() + <span class="string">&quot; 個水果&quot;</span>); <span class="comment">// 共有 3 個水果</span></span><br></pre></td></tr></table></figure><div class="flink"><div class="flink-name">文章連結</div><div class="flink-list">      <div class="flink-list-item">        <a href="https://blog.raylon.dev/2025/09/11/java-2/" title="上一篇" target="_blank">          <div class="flink-item-icon">            <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="上一篇" />          </div>          <div class="flink-item-name">上一篇</div>          <div class="flink-item-desc" title="Java 基礎(二)">Java 基礎(二)</div>        </a>      </div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 基礎(二)</title>
      <link href="/2025/09/11/java-2/"/>
      <url>/2025/09/11/java-2/</url>
      
        <content type="html"><![CDATA[<h2 id="介紹">介紹</h2><p>這一篇是 Java 基本語法介紹的第一篇，我們將由淺入深來探討程式碼架構。</p><h2 id="Java-基礎觀念">Java 基礎觀念</h2><ul><li>Java 是以類別(class)型態為單位，且大小寫有所區別。</li><li>一個檔案可以包含一個以上的類別，但最多只能有一個公開的接口，而這個接口由唯一的公用(public)的類別來表示。<blockquote><p>如果一個檔案內有多個 public 類別，編譯器會無法判定執行入口。</p></blockquote></li><li>一個應用程式，必須有一個「程式進入點」，程式的進入點必須宣告為靜態的 main 方法。</li><li><code>&#123; &#125;</code>內的程式屬於同一個區塊。</li><li>每行程式的尾段都必須要加上<code>;</code>來代表結束；大括號除外。</li></ul><h2 id="Hello-Java">Hello Java</h2><p>剛開始學程式一定會遇到的開頭式，就是教你怎麼打印輸出<code>Hello world</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>public class Main</code>: Java 程式碼必須要在 class 裡面，class 的名稱必須要和檔案名稱一樣。</li><li><code>public static void main(String[] args)</code>: 程式的入口地址，Java 運行時先找 main 方法；和 C 語言的 main()函數用法一樣。</li><li><code>System.out.println(&quot;Hello World!&quot;);</code>: 印出字串。</li></ul></blockquote><h2 id="註解">註解</h2><p>在 Java 中有兩種註解方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 單行註解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行註解1</span></span><br><span class="line"><span class="comment">多行註解2</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="類別的宣告與建構">類別的宣告與建構</h2><p>我們要如何宣告類別並建構出來。<br>以下範例可以看到 <code>Main</code> 為程式的進入點；<code>Printer</code> 為我們宣告的類別。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> PN; <span class="comment">// 定義類別的屬性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好，Java&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;序號：&quot;</span> + PN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Printer</span> <span class="variable">pt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Printer</span>();</span><br><span class="line">        pt.PN = <span class="number">1234567</span>;</span><br><span class="line">        pt.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>Printer pt</code>: 把 <code>Printer</code> 這個類別命名為 <code>pt</code>。</li><li><code>new Printer()</code>: 建構一個 <code>Printer</code> 類別。</li><li><code>pt.PN</code>: <code>pt</code> 的 <code>PN</code> 屬性。</li><li><code>pt.hello()</code>: 呼叫 <code>pt</code> 的 <code>hello</code> 方法。</li><li><code>public void hello()</code>: 回傳值類型為 <code>void</code> 則代表沒有回傳值。</li></ul></blockquote><blockquote><p>沒有加上 <code>public</code> 的類別屬於預設存取權限(default)，表示該類別只可以被同一個 package 裡的其他類別所存取。</p></blockquote><h3 id="類別宣告">類別宣告</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;修飾語&gt; class &lt;類別名稱&gt; &#123;</span><br><span class="line">屬性;</span><br><span class="line">方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="屬性宣告">屬性宣告</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;修飾語&gt; &lt;類型&gt; &lt;屬性名稱&gt; [=初始值];</span><br></pre></td></tr></table></figure><blockquote><p><code>[ ]</code>: 表示可選內容(option)。</p></blockquote><h3 id="方法宣告">方法宣告</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;修飾語&gt; &lt;回傳值類型&gt; &lt;方法名稱&gt;(&lt;接收的參數&gt;) &#123;</span><br><span class="line">程式敘述;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修飾語">修飾語</h3><h4 id="Public">Public</h4><p>任何地方都能存取，即使跨 package 也能夠存取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">meow</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Meow!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不論在哪個檔案或 package，都可以 <code>new Cat</code> 存取 name 和 meow() 方法。</p></blockquote><h4 id="Protected">Protected</h4><p>在同一 package 內可使用，或是不同 package 的子類別也可以存取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">sound</span> <span class="operator">=</span> <span class="string">&quot;generic&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(sound); <span class="comment">// 可以存取父類 protected 屬性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Dog 類別（即使不同 package）可以存取父類 Animal 的 protected 屬性，不是子類或同個 package 就不能存取。</p></blockquote><h4 id="Default">Default</h4><p>類別與方法僅限同個 package 存取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printId</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>預設型態，無修飾詞。</p></blockquote><h4 id="Private">Private</h4><p>範圍是最小的，只能在定義它的範圍區域內使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        balance += amount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非存取權限修飾詞">非存取權限修飾詞</h3><p>有很多非存取權限修飾詞，以下僅列出常用的「非存取權限修飾詞」:</p><h4 id="Static">Static</h4><p>static 被載入時就會分配記憶體，在整個程式執行期間都會存在，不會因為創建新物件而被重複分配。所有該類別的物件都共用同一份 static 成員，無論建立多少物件，static 變數只有一份。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Counter.add();</span><br><span class="line">        Counter.add();</span><br><span class="line">        System.out.println(<span class="string">&quot;Count: &quot;</span> + Counter.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Final">Final</h4><p>用來設定 <code>Only read</code> 屬性，不可被覆寫、不能被繼承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MathUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不可覆寫的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PI: &quot;</span> + MathUtil.PI);</span><br><span class="line">        <span class="type">MathUtil</span> <span class="variable">mu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MathUtil</span>();</span><br><span class="line">        mu.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Abstract">Abstract</h4><p>抽象類別或物件，用來當作一個模板，需要使用時可以繼承並實作有抽象屬性的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;height: %d\nweight: %d\n&quot;</span>, height, weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.name();</span><br><span class="line">        dog.printInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在繼承時需要實作所有抽象的方法。</p></blockquote><h2 id="建構物件">建構物件</h2><p>上面介紹了如何宣告類別並建構，當我們創建一個類別就是創建了一個物件。意思是依據類別的宣告，配置記憶體空間，再將空間位址指定給物件名稱。</p><p>我們除了可以創建類別，也可以導入 Java 內建的類別使用。<br>下列範例使用了內建的 <code>Scanner</code> 類別，讓我們能夠取得輸入資訊。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;請輸入學生分數：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">scoreOfStudent</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;該生是否及格? &quot;</span> + (scoreOfStudent &gt;= <span class="number">60</span> ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>Scanner(System.in)</code>: 讀取輸入設備。</li><li><code>scanner.nextInt()</code>: 讀取鍵盤上輸入的整數。</li></ul></blockquote><h3 id="導入宣告">導入宣告</h3><p>有兩種方式可以導入套件類別，一種是指定類別名稱；另一種是讀取所有類別。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &lt;套件名稱&gt;.&lt;類別名稱&gt;;</span><br><span class="line"><span class="keyword">import</span> &lt;套件名稱&gt;.*;</span><br></pre></td></tr></table></figure><h2 id="資料類型">資料類型</h2><h3 id="原生資料類型">原生資料類型</h3><table><tr>  <th>名稱</th>  <th>說明</th>  <th>資料類型</th>  <th>可儲存範圍</th>  <th>佔用空間</th></tr><tr>  <td rowspan="4">整數</td>  <td rowspan="4">只能儲存整數</td>  <td>byte</td>  <td>-128~127</td>  <td>1 byte</td></tr><tr>  <td>short</td>  <td>-32768~32767</td>  <td>2 bytes</td></tr><tr>  <td>int</td>  <td>-2147483648~2147483647</td>  <td>4 bytes</td></tr><tr>  <td>long</td>  <td>-9223372036854775808~9223372036854775807</td>  <td>8 bytes</td></tr><tr>  <td>浮點數</td>  <td>儲存小數</td>  <td>float</td>  <td>-3.4*10<sup>38</sup>~3.4*10<sup>38</sup> (小數後6到7位)</td>  <td>4 bytes</td></tr><tr>  <td>雙精度浮點數</td>  <td>儲存小數(範圍更大)</td>  <td>double</td>  <td>-1.7*10<sup>308</sup>~1.7*10<sup>308</sup> (小數後15位)</td>  <td>8 bytes</td></tr><tr>  <td>字元</td>  <td>字元採用 Unicode 的編碼</td>  <td>char</td>  <td>'\u0000' ~ '\uffff'</td>  <td>2 bytes</td></tr><tr>  <td>布林值</td>  <td>就是布林值</td>  <td>boolean</td>  <td>True / False</td>  <td>2 bytes</td></tr></table><blockquote><p>字元與字串的表示: <code>' '</code> 代表單一字元；<code>&quot; &quot;</code> 代表由多個字元組成的字串。</p></blockquote><h3 id="參考資料類型">參考資料類型</h3><p>Java 支援參考資料類型(Reference Data Type)，是物件在記憶體中堆區的參考位址，而非物件本身的值。因此，當參考變數被賦值時，是複製物件的記憶體地址，而非物件本身。我們可以使用 <code>new</code> 來建立物件。<br>以下是參考資料類型的種類:</p><ul><li><strong>類別(class)</strong>: 用於創建物件的模板，裡面定義物件的屬性與方法。</li><li><strong>介面(interface)</strong>: 定義一組方法，讓類別可以使用這些方法。</li><li><strong>陣列(array)</strong>: 儲存同類型的元素集合。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 創建 Point 物件 p1</span></span><br><span class="line">        <span class="type">Point</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;p1 的座標為: (&quot;</span> + p1.x + <span class="string">&quot;, &quot;</span> + p1.y + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義 Point 類別</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        x = a;</span><br><span class="line">        y = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="預設值">預設值</h3><p>使用資料類型宣告一個變數時，如果沒有指定值，則會自動設定一個初始值。</p><table><thead><tr><th>類型名稱</th><th>預設值</th></tr></thead><tbody><tr><td>整數</td><td>0</td></tr><tr><td>浮點數</td><td>0.0</td></tr><tr><td>字元</td><td>“”</td></tr><tr><td>布林值</td><td>False</td></tr></tbody></table><p>範例程式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">byte</span> defaultByte;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">short</span> defaultShort;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> defaultNumber;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span> defaultLong;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">float</span> defaultFloat;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span> defaultDouble;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">char</span> defaultChar;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> defaultBoolean;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Default byte: &quot;</span> + defaultByte);</span><br><span class="line">        System.out.println(<span class="string">&quot;Default short: &quot;</span> + defaultShort);</span><br><span class="line">        System.out.println(<span class="string">&quot;Default int: &quot;</span> + defaultNumber);</span><br><span class="line">        System.out.println(<span class="string">&quot;Default long: &quot;</span> + defaultLong);</span><br><span class="line">        System.out.println(<span class="string">&quot;Default float: &quot;</span> + defaultFloat);</span><br><span class="line">        System.out.println(<span class="string">&quot;Default double: &quot;</span> + defaultDouble);</span><br><span class="line">        System.out.println(<span class="string">&quot;Default char: &quot;</span> + defaultChar);</span><br><span class="line">        System.out.println(<span class="string">&quot;Default boolean: &quot;</span> + defaultBoolean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看資料類型">查看資料類型</h3><p>必須將指定變數轉為物件型態才能查看該變數的類型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">123</span>;</span><br><span class="line">System.out.println(((Object)x).getClass().getSimpleName()); <span class="comment">// Integer</span></span><br></pre></td></tr></table></figure><p>等同於</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">System.out.println(x.getClass().getSimpleName());</span><br></pre></td></tr></table></figure><h3 id="資料類型轉換">資料類型轉換</h3><p>有三種轉換變數類型的方式:</p><ul><li><code>(int)&lt;變數名稱&gt;</code>: 將指定變數轉換成 int 類型。</li><li><code>(char)&lt;變數名稱&gt;</code>: 將指定變數轉換成 char 類型。</li><li><code>(double)&lt;變數名稱&gt;</code>: 將指定變數轉換成 double 類型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">85</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">newScore</span> <span class="operator">=</span> (<span class="type">double</span>) score;</span><br><span class="line">        System.out.println(<span class="string">&quot;原始成績: &quot;</span> + score);</span><br><span class="line">        newScore = Math.sqrt(newScore) * <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;開根號乘 10 後的成績: &quot;</span> + newScore);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="變數宣告與命名">變數宣告與命名</h2><h3 id="變數宣告">變數宣告</h3><p>Java 是一種嚴格型態 (Strong-typed) 的程式語言，變數在使用之前一定要先宣告該變數的資料型別。</p><blockquote><p>宣告的主要目的是依據資料類型來配置記憶體空間。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> i, j=<span class="number">10</span>;  <span class="comment">//宣告 i, j 兩個整數變數，將 10 只指定給變數 j</span></span><br><span class="line">        i=<span class="number">20</span>;         <span class="comment">//將 20 指定給變數 i</span></span><br><span class="line">        System.out.println( <span class="string">&quot;變數i的內容 = &quot;</span> + i );</span><br><span class="line">        System.out.println( <span class="string">&quot;變數j的內容 = &quot;</span> + j );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有三種宣告方式:</p><h4 id="一般宣告">一般宣告</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;資料類型&gt; &lt;變數名稱&gt; [=初始值];</span><br></pre></td></tr></table></figure><blockquote><p><code>[ ]</code>: 表示可選內容(option)。</p></blockquote><h4 id="重複的資料型別變數">重複的資料型別變數</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;資料類型&gt; &lt;變數名稱<span class="number">1</span>&gt;,&lt;變數名稱<span class="number">2</span>&gt;,...;</span><br></pre></td></tr></table></figure><h4 id="重複的資料型別變數-指定初始值">重複的資料型別變數 (指定初始值)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;資料類型&gt; &lt;變數名稱<span class="number">1</span>&gt; = &lt;初始值&gt;,&lt;變數名稱<span class="number">2</span>&gt; = &lt;初始值&gt;,...;</span><br></pre></td></tr></table></figure><h3 id="命名方式">命名方式</h3><p>在命名時盡量使用良好的命名規則，不僅方便辨識其變數代表的意思，也方便知道其所屬的資料型別。<br>常見的命名方式: 駝峰式 (大駝峰 / 小駝峰)、蛇型命名 (Snake Case)、烤肉串命名 (Kebab Case)、匈牙利命名法 (Hungarian notation)</p><p>以下是 Java 推薦的命名方式。(僅供參考)</p><table><thead><tr><th>類型</th><th>命名規則</th><th>範例</th></tr></thead><tbody><tr><td>Class</td><td>每個單字的字首大寫 (大駝峰)</td><td>Printer, NumberCounter</td></tr><tr><td>Method</td><td>第一個單字字首小寫，其餘字首大寫 (小駝峰)，通常是動作 + 用途</td><td>splitData, getCodeBase</td></tr><tr><td>Variable</td><td>第一個單字字首小寫，其餘字首大寫 (小駝峰)，通常是型別 + 用途</td><td>iCount, bFlag</td></tr><tr><td>Constant</td><td>每個字大寫，並使用底線區隔單字</td><td>MAX_NUMBER, MIN_NUMBER</td></tr></tbody></table><h2 id="字串-String">字串 String</h2><h3 id="逃脫字元">逃脫字元</h3><p>逃脫字元 (Escape Character)，又稱溢出字元。有兩種使用目的:</p><ul><li>會被判斷是命令的字母或符號。</li><li>需要在字串中輸出特殊字元。</li></ul><p>以下是常見的逃脫字元:</p><table><thead><tr><th>字元</th><th>說明</th></tr></thead><tbody><tr><td>\b</td><td>Backspace 鍵</td></tr><tr><td>\n</td><td>換行符號</td></tr><tr><td>\t</td><td>Tab 鍵</td></tr><tr><td>\&quot;</td><td>輸出雙引號</td></tr><tr><td>\’</td><td>輸出單引號</td></tr><tr><td>\\</td><td>輸出反斜線</td></tr></tbody></table><blockquote><p>逃脫字元都是由 <code>\</code> + <code>特定字元</code> 組成。</p></blockquote><h3 id="字串的方法">字串的方法</h3><p>因為字串屬於一個物件，所以也具備了屬性與方法。</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><code>length()</code></td><td>取得字串字元數量。</td></tr><tr><td><code>equals()</code></td><td>比較兩個字串的內容是否相同。(回傳 true / false)</td></tr><tr><td><code>toLowerCase()</code></td><td>將字串內容轉換為小寫。</td></tr><tr><td><code>toUpperCase()</code></td><td>將字串內容轉換為大寫。</td></tr><tr><td><code>substring(起始位址)</code></td><td>擷取起始位址以後的字。</td></tr><tr><td><code>substring(起始位址, 結束的下個位址)</code></td><td>擷取起始位址到結束位址之間的字。</td></tr><tr><td><code>indexOf(字串)</code></td><td>尋找特定字串，回傳第一次出現的位址。(找不到則為 -1)</td></tr><tr><td><code>lastIndexOf(字串)</code></td><td>尋找特定字串，回傳最後一次出現的位址。(找不到則為 -1)</td></tr><tr><td><code>replace(舊字串, 新字串)</code></td><td>取代舊字串。</td></tr></tbody></table><h2 id="資料輸出">資料輸出</h2><p>我們可以使用 Java 內建的 <code>System.out</code> 類別的方法將內容顯示在螢幕上。<br><code>System.out</code> 提供了三種方式: <code>print()</code>, <code>println()</code>, <code>printf()</code></p><h3 id="無換行式輸出">無換行式輸出</h3><p>文字輸出時會接續內容，不會換行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;你好!&quot;</span>)</span><br><span class="line">System.out.print(<span class="string">&quot;我是XXX&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="換行式輸出">換行式輸出</h3><p>每次輸出時都會換行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;這是一段文字1&quot;</span>)</span><br><span class="line">System.out.println(<span class="string">&quot;這是一段文字2&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="格式化輸出">格式化輸出</h3><p>可以在指定位置插入特定值。<br>以下為格式化輸出的方式:</p><ul><li><code>%nd</code>: 十進位整數。</li><li><code>%m.nf</code>: 十進位浮點數格式。</li><li><code>%no</code>: 八進位數。</li><li><code>%nu</code>: 無符號的十進位數字。</li><li><code>%nx</code>: 十六進位數。</li><li><code>%nc</code>: 單一個字元。</li><li><code>%ns</code>: 字串。</li><li><code>%%</code>: 輸出 <code>%</code> 符號。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">252.55</span>;</span><br><span class="line">System.out.printf(<span class="string">&quot;Hello, %s. You are %d years old.\n&quot;</span>, <span class="string">&quot;Ray&quot;</span>, <span class="number">21</span>);</span><br><span class="line">System.out.printf(<span class="string">&quot;座標位置: x = %d, y = %.2f\n&quot;</span>, x, y);</span><br></pre></td></tr></table></figure><h3 id="靠左對齊-靠右對齊">靠左對齊 &amp; 靠右對齊</h3><p>格式化輸出方式:</p><ul><li><code>%&lt;字元數&gt;</code>: 靠右對齊 (預設)。</li><li><code>%-&lt;字元數&gt;</code>: 靠左對齊。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;[%10d]&quot;</span>, <span class="number">100</span>); <span class="comment">//  [       100]</span></span><br><span class="line">System.out.printf(<span class="string">&quot;[%-10d]&quot;</span>, <span class="number">100</span>); <span class="comment">// [100       ]</span></span><br></pre></td></tr></table></figure><p>下一篇將會繼續介紹 Java 的基礎語法。</p><div class="flink"><div class="flink-name">文章連結</div><div class="flink-list">      <div class="flink-list-item">        <a href="https://blog.raylon.dev/2025/09/06/java-1/" title="上一篇" target="_blank">          <div class="flink-item-icon">            <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="上一篇" />          </div>          <div class="flink-item-name">上一篇</div>          <div class="flink-item-desc" title="Java 基礎(一)">Java 基礎(一)</div>        </a>      </div>      <div class="flink-list-item">        <a href="https://blog.raylon.dev/2025/10/04/java-3/" title="下一篇" target="_blank">          <div class="flink-item-icon">            <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="下一篇" />          </div>          <div class="flink-item-name">下一篇</div>          <div class="flink-item-desc" title="Java 基礎(三)">Java 基礎(三)</div>        </a>      </div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 基礎(一)</title>
      <link href="/2025/09/06/java-1/"/>
      <url>/2025/09/06/java-1/</url>
      
        <content type="html"><![CDATA[<h2 id="認識-Java">認識 Java</h2><img src="/2025/09/06/java-1/image-4.png" class="" title="alt text"><p><a href="https://www.oracle.com/tw/java/technologies/">圖片來源</a></p><h3 id="起源">起源</h3><p>最初是由 Unix 作業系統下的伺服器廠商，<strong>昇陽</strong>公司所研發的一套<strong>跨平台物件導向程式語言</strong>。<br>是<strong>以 C++ 為基礎架構</strong>，更改了許多 C++ 的複雜之處，最終命名為我們熟悉的 Java。</p><blockquote><p>後來被甲骨文公司 (Oracle) 併購。</p></blockquote><h3 id="目的">目的</h3><ul><li>以物件導向為原則的設計模式。</li><li>允許同個程式在不同作業系統上執行。</li><li>內建對電腦網路的支援。</li><li>改善 C++ 的複雜之處，使其容易使用。</li></ul><h3 id="特性">特性</h3><p>跨平台的特性，<strong>強調「一次編寫，到處執行」</strong>，使用 Java 編寫的程式可以在編譯後不用經過任何更改，就能在任何裝置上運行。</p><p>Java 語言與其他程式語言不同的地方在於，編譯 (Compile) 後產生的結果二元碼，不能直接在作業系統上運行，必須透過 Java Virtual Machine (JVM) 轉換成該系統能夠處理的目的碼後才能運行。</p><img src="/2025/09/06/java-1/image.png" class=""><h3 id="執行環境">執行環境</h3><p>Java 的運行環境是透過下列元件組成:</p><h4 id="Java-Runtime-Environment-JRE">Java Runtime Environment (JRE)</h4><p><strong>提供作業系統在執行 Java 應用程式所需</strong>的軟體。</p><h4 id="Java-Virtual-Machine-JVM">Java Virtual Machine (JVM)</h4><p>用來<strong>將二元碼 (ByteCode) 轉換成系統看得懂的目的碼</strong>的軟體。</p><h4 id="Java-Development-Kit-JDK">Java Development Kit (JDK)</h4><p>Java 開發套件 (JDK)，原本名為 Software Development Kit (SDK)，可以理解成是裡面有所需開發工具的套件包。</p><blockquote><p>常見的，像是 OpenJDK 21 則表示使用 Java SE 21。</p></blockquote><h2 id="建置開發環境">建置開發環境</h2><h3 id="事前準備">事前準備</h3><ol><li>安裝 Docker | <a href="https://www.docker.com/">Docker: Accelerated Container Application Development</a></li><li>使用 VSCode + WSL</li><li>安裝 Dev Container 擴充套件 | <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers">Dev Containers - Visual Studio Marketplace</a></li></ol><h3 id="環境套件工具">環境套件工具</h3><ul><li><strong>Java</strong>: OpenJDK 17</li><li><strong>Maven</strong>: 3.9.x or high</li></ul><h3 id="新增開發用資料夾">新增開發用資料夾</h3><p>在 WSL 環境裡新增一個資料夾並進入 VSCode IDE</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> JavaEdu &amp;&amp; <span class="built_in">cd</span> JavaEdu</span><br><span class="line">code .</span><br></pre></td></tr></table></figure><h3 id="新增-Dev-Container-設定檔">新增 Dev Container 設定檔</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// For format details, see https://aka.ms/devcontainer.json. For config options, see the</span></span><br><span class="line"><span class="comment">// README at: https://github.com/devcontainers/templates/tree/main/src/ubuntu</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Java OpenJDK-17 Devcontainer (Ubuntu)&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile</span></span><br><span class="line">  <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mcr.microsoft.com/devcontainers/base:jammy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Features to add to the dev container. More info: https://containers.dev/features.</span></span><br><span class="line">  <span class="attr">&quot;features&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ghcr.io/devcontainers/features/node:1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ghcr.io/devcontainers/features/java:1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;17&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;installMaven&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;installGradle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;workspaceFolder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/workspace&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;customizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;vscjava.vscode-java-pack&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;vscjava.vscode-spring-initializr&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;vmware.vscode-spring-boot&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;vscjava.vscode-spring-boot-dashboard&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.</span></span><br><span class="line">  <span class="attr">&quot;remoteUser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果還不知道 DevContainer 是什麼東西的話，可以先看 <a href="https://blog.raylon.dev/2025/06/13/wsl-devcontainer-1">使用 WSL + DevContainer 進行程式開發</a>。</p></blockquote><h3 id="檢查-JDK-Maven-版本">檢查 JDK &amp; Maven 版本</h3><p>檢查開發環境是否成功安裝 Java 與 Maven。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure><h3 id="認識-Maven">認識 Maven</h3><p>Maven 是 Apache 旗下的產品，用來管理套件與自動化建構專案，透過 <code>pom.xml</code> 來管理專案。可以把它作為是整個專案的核心。</p><blockquote><p>Maven 提供了標準的建構流程，包含測試、打包、部署等功能。</p></blockquote><h3 id="創建第一個專案">創建第一個專案</h3><h4 id="使用-Maven-創建第一個專案">使用 Maven 創建第一個專案</h4><p>在 VSCode 中執行 <code>Ctrl + Shift + P</code> 輸入 <code>maven new project</code></p><h4 id="選擇範本">選擇範本</h4><p>剛開始練習，所以選擇 <code>No Archetype</code> 的基本專案就好。</p><img src="/2025/09/06/java-1/image-1.png" class=""><h4 id="Group-ID">Group ID</h4><p>通常設定為組織的反向域名。</p><img src="/2025/09/06/java-1/image-2.png" class=""><h4 id="設定-Project-Name">設定 Project Name</h4><img src="/2025/09/06/java-1/image-3.png" class=""><h4 id="認識專案結構">認識專案結構</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── pom.xml                        <span class="comment"># Maven 專案的核心設定檔</span></span><br><span class="line">├── src<span class="symbol">/</span>                           <span class="comment"># 程式碼區塊</span></span><br><span class="line">│   ├── main<span class="symbol">/</span>                      <span class="comment"># 主區塊</span></span><br><span class="line">│   │   ├── java<span class="symbol">/</span>                  <span class="comment"># Java 原始程式碼檔案</span></span><br><span class="line">│   │   │   └── com<span class="symbol">/</span>               <span class="comment"># 域名結構</span></span><br><span class="line">│   │   │       └── raylon<span class="symbol">/</span>        <span class="comment"># 域名結構</span></span><br><span class="line">│   │   │           └── Main.java  <span class="comment"># 主程式</span></span><br><span class="line">│   │   └── resources<span class="symbol">/</span>             <span class="comment"># 資源檔案</span></span><br><span class="line">│   └── test<span class="symbol">/</span>                      <span class="comment"># 測試區塊</span></span><br><span class="line">│       └── java<span class="symbol">/</span>                  <span class="comment"># 存放單元測試和整合測試</span></span><br><span class="line">└── target<span class="symbol">/</span>                        <span class="comment"># ByteCode</span></span><br><span class="line">    ├── classes<span class="symbol">/</span>                   <span class="comment"># 存放編譯後的主程式 .class 檔</span></span><br><span class="line">    │   └── com<span class="symbol">/</span></span><br><span class="line">    │       └── raylon<span class="symbol">/</span></span><br><span class="line">    │           └── Main.class</span><br><span class="line">    └── test-classes<span class="symbol">/</span>              <span class="comment"># 存放編譯後的測試 .class 檔</span></span><br></pre></td></tr></table></figure><p>這樣就創好專案了~ 接下來就是 Java 的基本語法介紹!!</p><div class="flink"><div class="flink-name">文章連結</div><div class="flink-list">      <div class="flink-list-item">        <a href="https://blog.raylon.dev/2025/09/11/java-2/" title="下一篇" target="_blank">          <div class="flink-item-icon">            <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="下一篇" />          </div>          <div class="flink-item-name">下一篇</div>          <div class="flink-item-desc" title="Java 基礎(二)">Java 基礎(二)</div>        </a>      </div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 n8n 建立 LINE 個人助理</title>
      <link href="/2025/07/27/n8n-line/"/>
      <url>/2025/07/27/n8n-line/</url>
      
        <content type="html"><![CDATA[<h2 id="動機">動機</h2><p>想要練習看看使用非常方便的 n8n 來建立屬於自己的 LINE 個人助理。</p><h2 id="解決方法">解決方法</h2><p>透過 ngrok 反向代理，將本機的 n8n 服務公開到網路上，然後在 n8n 上透過 Webhook 接收 LINE 訊息，並搭配 AI Agent 來控制 Google 行事曆。</p><h2 id="實作">實作</h2><h3 id="建立-ngrok">建立 ngrok</h3><p>到 <a href="https://ngrok.com/">https://ngrok.com/</a> 註冊一個帳戶，登入後可以看到右邊有很多啟動方式。<br>我們選擇使用 docker 來啟動。</p><img src="/2025/07/27/n8n-line/image.png" class=""><p>使用下方的指令進行啟動。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --net=host -it -e NGROK_AUTHTOKEN=&lt;你的金鑰&gt; ngrok/ngrok:latest http &lt;n8n 的埠號&gt;</span><br></pre></td></tr></table></figure><p>看到這個畫面代表啟動成功。</p><img src="/2025/07/27/n8n-line/image-1.png" class=""><h3 id="創建-Webhook">創建 Webhook</h3><p>剛開始先創建一個 Webhook 來接收訊號，這個 Webhook 會被網址使用 post 觸發。</p><img src="/2025/07/27/n8n-line/image-2.png" class=""><h3 id="連接-LINE-BOT">連接 LINE BOT</h3><p>把 Webhook 的 URL 複製到 LINE BOT 的 Webhook URL 裡。</p><img src="/2025/07/27/n8n-line/image-3.png" class=""><blockquote><p>注意紅色框框要改成 ngrok 提供的網址。</p></blockquote><p>接下來到 Response settings 把 Webhooks 打開。</p><img src="/2025/07/27/n8n-line/image-4.png" class=""><h3 id="測試連線">測試連線</h3><p>點選 <code>Listen for test event</code> 進行測試。</p><img src="/2025/07/27/n8n-line/image-5.png" class=""><p>在 <a href="https://developers.line.biz/console">https://developers.line.biz/console</a> 找到自己的機器人，並進入到 Messaging API 後，可以點選 <code>Verify</code> 進行測試。</p><img src="/2025/07/27/n8n-line/image-6.png" class=""><p>出現 Success 後，就可以在 Output 上看到回傳的結果。</p><img src="/2025/07/27/n8n-line/image-7.png" class=""><h3 id="建立一個表單">建立一個表單</h3><p>建立一個 <code>Edit Fields</code> 節點，把輸入資訊整理成一個表單。</p><img src="/2025/07/27/n8n-line/image-8.png" class=""><h3 id="建立一個-AI-Agent">建立一個 AI Agent</h3><p>建立一個 AI Agent 後，我們可以看到它需要有三個元件，分別是:「模型」、「資料庫」、「工具」。</p><img src="/2025/07/27/n8n-line/image-9.png" class=""><p>模型的部分選擇免費的 Google Gemini。</p><img src="/2025/07/27/n8n-line/image-10.png" class=""><p>資料庫的部份選擇一般即可。</p><img src="/2025/07/27/n8n-line/image-11.png" class=""><p>工具的部份可以依照自己的需求自行添加，稍後會添加。</p><h3 id="輸入模型-API">輸入模型 API</h3><p>點擊模型可以進入到此頁面，要先創建憑證，創建時會需要輸入 API key，輸入完後儲存，並選擇要使用的模型版本。</p><img src="/2025/07/27/n8n-line/image-12.png" class=""><h3 id="測試模型運作">測試模型運作</h3><p>我們在 LINE 上輸入&quot;你好&quot;後，模型成功回覆，代表模型正常運作。</p><img src="/2025/07/27/n8n-line/image-13.png" class=""><h3 id="GCP-憑證">GCP 憑證</h3><p>因為我們等等會使用到 google 日曆，因此我們需要申請一個使用者憑證才能做使用。<br>首先要到 <a href="https://console.cloud.google.com/">https://console.cloud.google.com/</a> ，進來後先創建一個專案，創建完後會看到這個頁面。</p><img src="/2025/07/27/n8n-line/image-14.png" class=""><p>我們點選 API 和服務，後搜尋 Google Calendar API 進行安裝，我們等等會需要用到。</p><img src="/2025/07/27/n8n-line/image-15.png" class=""><p>接著回到「API 和服務」頁面，點選憑證，然後創建一個 OAuth 用戶端 ID。<br>應用程式類型選擇「網頁應用程式」，名稱可以自定義。</p><img src="/2025/07/27/n8n-line/image-16.png" class=""><p>接下來按建立，建立完畢後會出現 Client ID 和 Client Secret，這兩個要保存好，等等會用到。</p><h3 id="新增一個日曆">新增一個日曆</h3><p>在 Google 日曆中新增一個日曆。</p><img src="/2025/07/27/n8n-line/image-17.png" class=""><h3 id="串接實用工具">串接實用工具</h3><p>我們使用 Google Calendar 作為範例，讓 AI 能夠幫我們新增行事曆排程。</p><img src="/2025/07/27/n8n-line/image-18.png" class=""><p>新增完節點後，我們要輸入憑證，會看到這個畫面。<br>要把 OAuth Redirect URL 複製到剛剛在 GCP 建立的憑證上 (已授權的重新導向 URI)，然後儲存。<br>再把 Client ID 和 Client Secret 輸入進 n8n，再點擊 Sign in with Google 進行驗證。</p><img src="/2025/07/27/n8n-line/image-19.png" class=""><img src="/2025/07/27/n8n-line/image-20.png" class=""><p>紅色框的部分，要改為目標日曆，開始與結束日期由 AI 自動輸入。<br>(紅框上的部分，可以依照自己的需求進行設定)</p><img src="/2025/07/27/n8n-line/image-21.png" class=""><img src="/2025/07/27/n8n-line/image-22.png" class=""><h3 id="新增當前時間">新增當前時間</h3><p>因為日曆排程需要日期與時間，因此我們要在 AI Agent 節點前新增一個 Date &amp; Time 節點，讓 AI 知道當前時間。<br>紅框內的選項記得要打開，這樣才能引用之前的輸入。</p><img src="/2025/07/27/n8n-line/image-23.png" class=""><h3 id="優化模型">優化模型</h3><p>在 Option 選項裡新增 System Message 後，可以看到預設的 prompt 是告訴 AI「你是一個有用的助理」，我們可以透過下 prompt 來優化 AI，讓 AI 能夠更清楚的知道它要做什麼。</p><img src="/2025/07/27/n8n-line/image-24.png" class=""><p>因此，我提供一個 prompt 給大家做參考。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你是一位個人助理，你的職責是協助使用者處理日常事務，你可以使用以下工具來完成任務:</span><br><span class="line">- Google Calendar: 用於建立行事曆事件，當使用者需要安排行程或建立提醒時，請使用此工具，事件的摘要(Summary)是必填欄位。</span><br><span class="line"></span><br><span class="line">目前時間為: &#123;&#123; $json.currentDate &#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要記得改為 Expression 輸入模式</p></blockquote><p>這樣就完成了 AI 助理的建置，還有很多方便的工具可以依照需求自行新增。</p><h3 id="建立機器人回覆節點">建立機器人回覆節點</h3><p>建立一個 HTTP Request 節點，打一個 API 來回覆使用者。<br>使用 POST 模式，URL 為 <code>https://api.line.me/v2/bot/message/reply</code>，Authentication 要選擇 <code>Generic Credential Type</code>，然後選擇 <code>Header Auth</code>。</p><img src="/2025/07/27/n8n-line/image-25.png" class=""><p>創建一個 <code>Header Auth</code>，名稱為 <code>Authorization</code>，值要輸入 <code>Bearer &lt;access token&gt;</code>。</p><img src="/2025/07/27/n8n-line/image-26.png" class=""><p>打開 <code>Send Body</code> 選項，使用 Json 格式，並輸入以下 Json 內容。</p><img src="/2025/07/27/n8n-line/image-27.png" class=""><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;replyToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;&#123; $(&#x27;Edit Fields&#x27;).first().json.replyToken &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;&#123; $json.output &#125;&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="測試回覆">測試回覆</h3><p>使用 LINE 和 Bot 進行對話，最後 Bot 有成功回覆訊息。</p><img src="/2025/07/27/n8n-line/image-28.png" class=""><h3 id="正式開放-Webhook">正式開放 Webhook</h3><p>啟動我們的 Workflow。</p><img src="/2025/07/27/n8n-line/image-29.png" class=""><p>最後，只需要把我們 Webhook 節點的 <code>Test URL</code> 改為 <code>Production URL</code>，這樣就能夠一直監聽。</p><img src="/2025/07/27/n8n-line/image-30.png" class=""><blockquote><p>也要記得把 LINE Bot 的 Webhook 替換成 Production URL 喔</p></blockquote><h2 id="如何使用">如何使用</h2><p>建置完畢後，我們就能夠在 LINE 上輸入需求，讓個人助理幫你完成事務。</p><img src="/2025/07/27/n8n-line/image-31.png" class=""><img src="/2025/07/27/n8n-line/image-32.png" class=""><h2 id="總結">總結</h2><p>n8n 是一個非常好用的自動化工作流平台，使用者不需要寫大量的 Code，只需要透過建立節點來打造出自己的工作流程，節省大量的開發時間，重點它是免費開源的!!!</p><h2 id="參考文獻">參考文獻</h2><ul><li><a href="https://ngrok.com/">https://ngrok.com/</a></li><li><a href="https://n8n.io/">https://n8n.io/</a></li><li><a href="https://developers.line.biz/">https://developers.line.biz/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>filebrowser + nginx 建立自定義網域下載</title>
      <link href="/2025/07/09/fbs-share/"/>
      <url>/2025/07/09/fbs-share/</url>
      
        <content type="html"><![CDATA[<h2 id="動機">動機</h2><p>因為系上的實驗室內部有架設 filebrowser 提供檔案傳輸的服務，但最近遇到一個問題，在下載檔案時 filebrowser 會透過 JSON Web Token (JWT) 來驗證使用者，憑證輸入後會導致網址變得非常難看。因為常常會使用 wget 來下載檔案，不想要輸入又臭又長的網址，因此想出了一個方法解決了網址超長且意義不明確的問題。</p><ul><li><strong>因為輸入 token 導致網址超長</strong><img src="/2025/07/09/fbs-share/image.png" class="" title="long token"></li></ul><h2 id="方法">方法</h2><p>透過 filebrowser 的邀請碼的方式來讓使用者下載檔案時不需要輸入 token，這樣也就意味著網址不會又臭又長的，而且可以搭配 Nginx 反向代理來進行訪問限制與轉發，使用自定義網域來指向邀請碼所提供的分享連結進行檔案下載。</p><h2 id="實作">實作</h2><h3 id="第一步">第一步</h3><p>打開 filebrowser ，創建一個主資料夾，用來存放 filebrowser 裡的檔案，然後為它創建一個邀請碼，時間可以設訂 999 小時(含以上)，確保連結不會在短期失效。</p><ul><li><strong>邀請碼創建完畢</strong><img src="/2025/07/09/fbs-share/image-1.png" class="" title="share code"></li></ul><h3 id="第二步">第二步</h3><p>創建完邀請碼後，透過邀請碼旁邊的複製按鈕，來取得分享連結。</p><h3 id="第三步">第三步</h3><p>透過 Nginx 來設定網路規則讓連線指向我們的分享連結，並禁止訪問特定的網址。<br>設定完之後就能夠透過指定網域來進行下載檔案啦!</p><p>nginx 設定範例:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~ ^/dl/.+</span> &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/dl/(.*)$</span> /api/public/dl/juG-7DV_/<span class="variable">$1</span> <span class="literal">break</span>; <span class="comment"># dl/ 後面要改成自己的邀請碼</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://172.16.3.49:4100;  <span class="comment"># 指向你的 Filebrowser 服務</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阻擋其他路徑訪問</span></span><br><span class="line"><span class="section">location</span> <span class="regexp">~ ^/api/public/dl/[^/]+/?$</span> &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> = /dl &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">autoindex</span> <span class="literal">off</span>;</span><br></pre></td></tr></table></figure><h2 id="如何使用">如何使用</h2><p>依照你在 nginx 設定的網域並加上 <code>dl/&lt;目錄名稱or檔案名稱&gt;</code> 來下載你的檔案。</p><blockquote><p>範例: <code>https://abc.com/dl/&lt;目錄名稱or檔案名稱&gt;</code></p></blockquote><h2 id="如何發現">如何發現</h2><p>使用 filebrowser 一段時間了，只知道可以透過邀請碼來下載檔案，事發後突然想到邀請碼不需要輸入 token 就能夠下載檔案，而且連結可以保留很長一段時間，因此我開始嘗試使用邀請碼來固定下載連結，後來又發現使用的連結有特定的格式關係，這讓我想到可以搭配 Nginx 來將我的網域導到這個特定的連結，因此就發現了這個方法解決了網址超長的問題之外，又能夠讓下載連結變得有意義、淺顯易懂。</p><blockquote><ul><li>主資料夾分享的下載連結<img src="/2025/07/09/fbs-share/image-2.png" class="" title="share1"></li><li>主資料夾底下檔案的下載連結<img src="/2025/07/09/fbs-share/image-3.png" class="" title="share2">可以發現以 dl 後為主資料夾的邀請碼，之後裡面的每個資料夾或檔案都是以自己命名的名稱做區分，因此可以很好理解每個檔案的意義，透過 nginx 後，在輸入網址下載時可以只輸入邀請碼後面的部份，而不需要輸入前面重複的網址區塊。</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建屬於自己的檔案管理頁面</title>
      <link href="/2025/06/28/filebrowser-service/"/>
      <url>/2025/06/28/filebrowser-service/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>今天要介紹一個好用的檔案管理工具 FileBrowser，讓我們能夠很方便的管理與修改檔案。</p><h2 id="什麼是-FileBrowser">什麼是 FileBrowser</h2><p>FileBrowser 可以連結到遠端的伺服器，讓一般使用者能夠透過瀏覽器的方式來對檔案進行管理 (edit, update, create, delete)，不需要使用終端機。</p><h2 id="如何建置">如何建置</h2><h4 id="Dockerfile">Dockerfile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.21</span>.<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk update &amp;&amp; apk add --no-cache \</span></span><br><span class="line"><span class="language-bash">    curl wget ca-certificates bash tar grep sed coreutils unzip &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    adduser -h /opt/app -D app &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    curl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./entrypoint /opt/app/entrypoint</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> a+x /opt/app/entrypoint</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> app</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /srv</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /database/filebrowser.db</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /config/settings.json</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">4100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/opt/app/entrypoint&quot;</span> ]</span></span><br></pre></td></tr></table></figure><h4 id="entrypoint">entrypoint</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">filebrowser config init --port 4100 --address <span class="string">&quot;&quot;</span> --baseurl <span class="string">&quot;&quot;</span> --<span class="built_in">log</span> <span class="string">&quot;stdout&quot;</span> --root=<span class="string">&quot;/srv&quot;</span></span><br><span class="line">filebrowser <span class="built_in">users</span> add &lt;name&gt; &lt;password&gt; --perm.admin <span class="comment"># 設定管理員帳戶</span></span><br><span class="line">filebrowser <span class="comment"># 啟動服務</span></span><br></pre></td></tr></table></figure><blockquote><p>密碼長度需大於 12 字元</p></blockquote><h4 id="建置-image">建置 image</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t fbs:alpine3.21.3 .</span><br></pre></td></tr></table></figure><h4 id="啟動服務">啟動服務</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> srv database config</span><br><span class="line">docker run --name fbs -dp 4100:4100 -v srv:/srv -v database:/database -v config:/config fbs:alpine3.21.3</span><br></pre></td></tr></table></figure><h2 id="如何使用">如何使用</h2><p>開啟瀏覽器並輸入 <code>&lt;ip&gt;:&lt;port&gt;</code>，進入 filebrowser 就能夠對公開的檔案做管理。</p><img src="/2025/06/28/filebrowser-service/filebrowser.png" class="" title="filebrowser"><p><a href="https://filebrowser.org/index.html">圖片來源</a></p><h2 id="參考文獻">參考文獻</h2><ul><li><a href="https://filebrowser.org/">https://filebrowser.org/</a></li><li><a href="https://blog.csdn.net/weixin_48227918/article/details/131798149">https://blog.csdn.net/weixin_48227918/article/details/131798149</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 WSL + DevContainer 進行程式開發(二)</title>
      <link href="/2025/06/15/wsl-devcontainer-2/"/>
      <url>/2025/06/15/wsl-devcontainer-2/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-Dev-Container">什麼是 Dev Container</h2><p>是以 Docker 為基礎，將開發環境與依賴套件或工具打包成一個容器 (Container)，方便使用者能夠快速建置與復原開發環境。<br>主要的功能如下:</p><ul><li><strong>環境一致性</strong>: 無論是在 Windows 或 Linux，只要設定好 Dev Container，同一份程式碼都可以在一致的環境下運作</li><li><strong>隔離性</strong>: 可同時在一台電腦上運行多個不同語言、版本的開發環境，避免汙染本機</li></ul><p><img src="https://code.visualstudio.com/assets/docs/devcontainers/containers/architecture-containers.png" alt="Dev Container 架構"><a href="https://code.visualstudio.com/docs/devcontainers/containers">圖片來源</a></p><h2 id="如何建置">如何建置</h2><h3 id="事前準備">事前準備</h3><ol><li>安裝 Docker | <a href="https://www.docker.com/">Docker: Accelerated Container Application Development</a></li><li>使用 VSCode + WSL</li><li>安裝 Dev Container 擴充套件 | <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers">Dev Containers - Visual Studio Marketplace</a></li></ol><h3 id="新增開發用資料夾">新增開發用資料夾</h3><p>在 WSL 環境裡新增一個資料夾並進入 VSCode</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> DevContainerTest &amp;&amp; <span class="built_in">cd</span> DevContainerTest</span><br><span class="line">code .</span><br></pre></td></tr></table></figure><h3 id="新增-Dev-Container-設定檔">新增 Dev Container 設定檔</h3><p>點擊 VSCode 左下角的操作選單或使用 <code>Ctrl + Shift + P</code>，選擇 Add Dev Container Configuration Files。</p><img src="/2025/06/15/wsl-devcontainer-2/image.png" class=""><img src="/2025/06/15/wsl-devcontainer-2/image-1.png" class=""><p>接下來選擇映像檔，為了示範我選擇 Ubuntu jammy 版本。</p><img src="/2025/06/15/wsl-devcontainer-2/image-2.png" class=""><img src="/2025/06/15/wsl-devcontainer-2/image-3.png" class=""><p>然後安裝所需的套件，這裡選擇 Node.js 套件。</p><img src="/2025/06/15/wsl-devcontainer-2/image-4.png" class=""><p>接下來都按 OK 就好。</p><img src="/2025/06/15/wsl-devcontainer-2/image-5.png" class=""><img src="/2025/06/15/wsl-devcontainer-2/image-6.png" class=""><p>就會建立一個 devcontainer.json 的設定檔。</p><img src="/2025/06/15/wsl-devcontainer-2/image-7.png" class=""><h3 id="查看-devcontainer-json">查看 devcontainer.json</h3><p>設定檔由以下元素組成:</p><ul><li><code>name</code>: container name</li><li><code>image</code>: 使用 dev container 官方的映像檔<blockquote><p>如果要使用 dockerfile 或 compose 可以參考<br><a href="https://containers.dev/guide/dockerfile">Using Images, Dockerfiles, and Docker Compose</a></p></blockquote></li><li><code>features</code>: 安裝官方提供的套件</li><li><code>forwardPorts</code>: 將 Container 的 port 對應到本地的 port</li><li><code>postCreateCommand</code>: Container 建置完後會執行的命令</li><li><code>customizations</code>: 客製化設定，例如 VSCode 的擴充套件或設定參數等<blockquote><p>詳細內容，可以參考 <a href="https://containers.dev/supporting">支援工具和服務 — Supporting tools and services</a></p></blockquote></li><li><code>remoteUser</code>: Container 執行的身份</li><li><code>containerEnv</code>: Container 的環境變數</li></ul><h3 id="更新-devcontainer-json">更新 devcontainer.json</h3><p>依照自己的需求來進一步的設定屬於自己開發環境，我這邊以 Vue 為例，新增常用的擴充套件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// For format details, see https://aka.ms/devcontainer.json. For config options, see the</span></span><br><span class="line"><span class="comment">// README at: https://github.com/devcontainers/templates/tree/main/src/ubuntu</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ubuntu&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile</span></span><br><span class="line">  <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mcr.microsoft.com/devcontainers/base:jammy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;features&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ghcr.io/devcontainers/features/node:1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Configure tool-specific properties.</span></span><br><span class="line">  <span class="attr">&quot;customizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">// Set *default* container specific settings.json values on container create.</span></span><br><span class="line">      <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;octref.vetur&quot;</span><span class="punctuation">,</span> <span class="string">&quot;vue.volar&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ms-vscode.live-server&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.</span></span><br><span class="line">  <span class="attr">&quot;remoteUser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="執行-Dev-Container">執行 Dev Container</h3><p>設定完畢後，就可以使用 <code>Ctrl + Shift + P</code>，並選擇 <code>Reopen in Container</code> 來進入 Container</p><img src="/2025/06/15/wsl-devcontainer-2/image-8.png" class=""><p>Container 建置完畢後，就可以進行環境測試。</p><ul><li>檢查是否有 node 套件，以及擴充套件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><img src="/2025/06/15/wsl-devcontainer-2/image-9.png" class=""><img src="/2025/06/15/wsl-devcontainer-2/image-10.png" class=""><h3 id="開始使用開發環境進行開發">開始使用開發環境進行開發</h3><p>範例: 透過開發環境來建置一個 Vue 網頁</p><h4 id="安裝-Vue-套件">安裝 Vue 套件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue.js</span><br></pre></td></tr></table></figure><h4 id="創建-Vue-專案">創建 Vue 專案</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><img src="/2025/06/15/wsl-devcontainer-2/image-11.png" class=""><h4 id="執行專案">執行專案</h4><p>這樣我們就能夠透過 Dev Container 進行開發專案了~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;project name&gt;</span><br><span class="line">yarn</span><br><span class="line">yarn dev --host 0.0.0.0</span><br></pre></td></tr></table></figure><p>透過擴充套件 <code>Live Preview</code> 就能夠在側邊群組即時顯示預覽頁面。</p><img src="/2025/06/15/wsl-devcontainer-2/image-12.png" class=""><blockquote><p>Dev Container 的所有檔案會存在該專案的目錄裡。</p><img src="/2025/06/15/wsl-devcontainer-2/image-13.png" class=""></blockquote><h2 id="關閉-Container">關閉 Container</h2><p>使用 <code>Ctrl + Shift + P</code>，選擇 <code>Close Remote Connection</code>就能夠退出 Container。</p><img src="/2025/06/15/wsl-devcontainer-2/image-14.png" class=""><h2 id="結論">結論</h2><p>Dev Container 不管是個人使用或在多人開發上，都大幅度的減少使用者建立開發環境所需要的時間成本，能快速重構當時的開發環境，並且也以利於後續專案維護。</p><h2 id="參考文獻">參考文獻</h2><ul><li><a href="https://code.visualstudio.com/docs/devcontainers/containers">https://code.visualstudio.com/docs/devcontainers/containers</a></li></ul><div class="flink"><div class="flink-name">文章連結</div><div class="flink-list">      <div class="flink-list-item">        <a href="https://blog.raylon.dev/2025/06/13/wsl-devcontainer-1/" title="上一篇" target="_blank">          <div class="flink-item-icon">            <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="上一篇" />          </div>          <div class="flink-item-name">上一篇</div>          <div class="flink-item-desc" title="使用 WSL + DevContainer 進行程式開發(一)">使用 WSL + DevContainer 進行程式開發(一)</div>        </a>      </div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 WSL + DevContainer 進行程式開發(一)</title>
      <link href="/2025/06/13/wsl-devcontainer-1/"/>
      <url>/2025/06/13/wsl-devcontainer-1/</url>
      
        <content type="html"><![CDATA[<h2 id="什麼是-WSL">什麼是 WSL</h2><p>WSL 全名為 Windows Subsystem for Linux，是一款能讓使用者在 Windows 作業系統上直接執行 Linux 環境的 Windows 子系統。</p><h2 id="WSL-的版本介紹">WSL 的版本介紹</h2><h3 id="WSL-1">WSL 1</h3><p>是採用系統呼叫轉譯 (System Call Translation) 的架構，將 Linux 的命令轉譯成 Windows API，這種方式是在 Windows 上模擬 Linux 的環境。因為每次的動作都要進行轉譯，因此會有執行延遲的問題。</p><p><img src="https://benjr.tw/wp-content/uploads/2019/09/WSL1.png" alt="WSL Architecture"><br><a href="https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fbenjr.tw%2F102024&amp;psig=AOvVaw1WuM2ujUUpXrAVdzAJh0oA&amp;ust=1750143469697000&amp;source=images&amp;cd=vfe&amp;opi=89978449&amp;ved=0CBQQjRxqFwoTCMCDiNCu9Y0DFQAAAAAdAAAAABAK">圖片來源</a></p><h3 id="WSL-2">WSL 2</h3><p>則是採用虛擬機 (Virtual Machine) 的架構，在虛擬機內運行一個完整的 Linux 作業系統，無需透過轉譯的方式，因此執行速度大幅提升。<br><img src="https://www.polarsparc.com/xhtml/images/WSL-01.png" alt="WSL2 Architecture"><br><a href="https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fwww.polarsparc.com%2Fxhtml%2FIntroToWSL2.html&amp;psig=AOvVaw0VMbhWC8N0blRyxrFUzIPp&amp;ust=1750142709134000&amp;source=images&amp;cd=vfe&amp;opi=89978449&amp;ved=0CBQQjRxqFwoTCICz5uWr9Y0DFQAAAAAdAAAAABAn">圖片來源</a></p><blockquote><p>完整的 WSL 2 架構圖<br><img src="https://i.redd.it/po98dksksjx21.png" alt="Complete WSL2 Architecture"><a href="https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fbashonubuntuonwindows%2Fcomments%2Fbna3hq%2Fthe_complete_diagram_of_the_wsl2_architecture_as%2F%3Ftl%3Dzh-hant&amp;psig=AOvVaw0VMbhWC8N0blRyxrFUzIPp&amp;ust=1750142709134000&amp;source=images&amp;cd=vfe&amp;opi=89978449&amp;ved=0CBQQjRxqFwoTCICz5uWr9Y0DFQAAAAAdAAAAABAx">圖片來源</a></p></blockquote><h2 id="安裝-WSL">安裝 WSL</h2><ol><li><p>在 windows 功能中打開 <code>Virtual Machine Platform</code> 與 <code>Windows Subsystem for Linux</code></p><img src="/2025/06/13/wsl-devcontainer-1/windows-features.png" class="" title="windows features"></li><li><p>以系統管理員身分開啟 powershell 執行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure></li><li><p>重啟系統</p></li><li><p>建置第一個 Ubuntu 子系統</p><ul><li>使用 Ubuntu 22.04 版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install -d Ubuntu-22.04</span><br></pre></td></tr></table></figure></li></ol><h2 id="WSL-常用的命令">WSL 常用的命令</h2><p>列出幾個比較常用的命令</p><h3 id="列出所有可用的-Linux">列出所有可用的 Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --list --online</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">The</span> following is a list of valid distributions that can be installed.</span><br><span class="line"><span class="attribute">Install</span> using &#x27;wsl.exe --install &lt;Distro&gt;&#x27;.</span><br><span class="line"></span><br><span class="line"><span class="attribute">NAME</span>                            FRIENDLY NAME</span><br><span class="line"><span class="attribute">Ubuntu</span>                          Ubuntu</span><br><span class="line"><span class="attribute">Debian</span>                          Debian GNU/Linux</span><br><span class="line"><span class="attribute">kali</span>-linux                      Kali Linux Rolling</span><br><span class="line"><span class="attribute">Ubuntu</span>-<span class="number">18</span>.<span class="number">04</span>                    Ubuntu <span class="number">18</span>.<span class="number">04</span> LTS</span><br><span class="line"><span class="attribute">Ubuntu</span>-<span class="number">20</span>.<span class="number">04</span>                    Ubuntu <span class="number">20</span>.<span class="number">04</span> LTS</span><br><span class="line"><span class="attribute">Ubuntu</span>-<span class="number">22</span>.<span class="number">04</span>                    Ubuntu <span class="number">22</span>.<span class="number">04</span> LTS</span><br><span class="line"><span class="attribute">Ubuntu</span>-<span class="number">24</span>.<span class="number">04</span>                    Ubuntu <span class="number">24</span>.<span class="number">04</span> LTS</span><br><span class="line"><span class="attribute">OracleLinux_7_9</span>                 Oracle Linux <span class="number">7</span>.<span class="number">9</span></span><br><span class="line"><span class="attribute">OracleLinux_8_7</span>                 Oracle Linux <span class="number">8</span>.<span class="number">7</span></span><br><span class="line"><span class="attribute">OracleLinux_9_1</span>                 Oracle Linux <span class="number">9</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">openSUSE</span>-Leap-<span class="number">15</span>.<span class="number">6</span>              openSUSE Leap <span class="number">15</span>.<span class="number">6</span></span><br><span class="line"><span class="attribute">SUSE</span>-Linux-Enterprise-<span class="number">15</span>-SP5    SUSE Linux Enterprise <span class="number">15</span> SP5</span><br><span class="line"><span class="attribute">SUSE</span>-Linux-Enterprise-<span class="number">15</span>-SP6    SUSE Linux Enterprise <span class="number">15</span> SP6</span><br><span class="line"><span class="attribute">openSUSE</span>-Tumbleweed             openSUSE Tumbleweed</span><br></pre></td></tr></table></figure><h3 id="建置-Linux-子系統">建置 Linux 子系統</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install -d &lt;Distro&gt;</span><br></pre></td></tr></table></figure><h3 id="列出以安裝的-Linux-子系統">列出以安裝的 Linux 子系統</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --list</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Windows</span> Subsystem for Linux Distributions:</span><br><span class="line"><span class="attribute">Ubuntu</span>-<span class="number">22</span>.<span class="number">04</span> (Default)</span><br></pre></td></tr></table></figure><blockquote><p>有 (Default) 代表為預設啟動</p></blockquote><h3 id="設定預設啟動的-Linux-子系統">設定預設啟動的 Linux 子系統</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default &lt;Distro&gt;</span><br></pre></td></tr></table></figure><h3 id="進入-Linux-子系統">進入 Linux 子系統</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>exit</code> 可以退出子系統</p></blockquote><h3 id="移除特定的-Linux-子系統">移除特定的 Linux 子系統</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister &lt;Distro&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意! 會刪除子系統內的所有檔案</p></blockquote><h3 id="更新-WSL">更新 WSL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --update</span><br></pre></td></tr></table></figure><h3 id="查詢更多-WSL-相關命令">查詢更多 WSL 相關命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h2 id="如何使用-WSL-進行開發">如何使用 WSL 進行開發</h2><p>前置任務都準備完畢，終於要進入正軌了，開始進入 WSL 建置開發環境~</p><p>創建完 Linux 子系統後就可以進入到子系統內。</p><blockquote><p>以 Ubuntu 22.04 作為執行範例</p></blockquote><h2 id="本機上安裝-VSCode">本機上安裝 VSCode</h2><p><a href="https://code.visualstudio.com/">安裝 VSCode</a></p><h2 id="安裝-VSCode-套件">安裝 VSCode 套件</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">安裝 WSL 套件</a></p><h3 id="進入-Linux-子系統-2">進入 Linux 子系統</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl</span><br></pre></td></tr></table></figure><h3 id="創建工作目錄">創建工作目錄</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/mywork</span><br><span class="line"><span class="built_in">cd</span> ~/mywork</span><br></pre></td></tr></table></figure><blockquote><p>預設在進入子系統時會以 Windows 的工作目錄作為啟動目錄</p></blockquote><h3 id="進入子系統的-VSCode">進入子系統的 VSCode</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><blockquote><p>透過我們在 VSCode 上安裝的 WSL 套件，讓我們可以使用 <code>code .</code> 來開啟當前目錄的 VSCode 編輯器</p></blockquote><p>下一步就是來建置我們的 DevContainer 了</p><h2 id="參考文獻">參考文獻</h2><ul><li><a href="https://learn.microsoft.com/zh-tw/windows/wsl/install">https://learn.microsoft.com/zh-tw/windows/wsl/install</a></li><li><a href="https://learn.microsoft.com/zh-tw/windows/wsl/compare-versions">https://learn.microsoft.com/zh-tw/windows/wsl/compare-versions</a></li><li><a href="https://zh.wikipedia.org/zh-tw/%E9%80%82%E7%94%A8%E4%BA%8ELinux%E7%9A%84Windows%E5%AD%90%E7%B3%BB%E7%BB%9F">https://zh.wikipedia.org/zh-tw/适用于Linux的Windows子系统</a></li></ul><div class="flink"><div class="flink-name">文章連結</div><div class="flink-list">      <div class="flink-list-item">        <a href="https://blog.raylon.dev/2025/06/15/wsl-devcontainer-2/" title="下一篇" target="_blank">          <div class="flink-item-icon">            <img class="no-lightbox" src="undefined" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="下一篇" />          </div>          <div class="flink-item-name">下一篇</div>          <div class="flink-item-desc" title="使用 WSL + DevContainer 進行程式開發(二)">使用 WSL + DevContainer 進行程式開發(二)</div>        </a>      </div></div></div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
